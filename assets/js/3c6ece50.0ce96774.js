"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[145],{8436:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>s,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"database-integration","title":"Database Integration","description":"Jazzy Framework 0.3 introduces comprehensive database integration with Spring Data JPA-like functionality. The framework provides automatic entity discovery, repository pattern implementation, and zero-configuration database setup.","source":"@site/docs/database-integration.md","sourceDirName":".","slug":"/database-integration","permalink":"/jazzy-framework/docs/database-integration","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/database-integration.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection Examples","permalink":"/jazzy-framework/docs/di-examples"},"next":{"title":"Repository Pattern","permalink":"/jazzy-framework/docs/repositories"}}');var i=n(4848),t=n(8453);const s={},o="Database Integration",l={},c=[{value:"Overview",id:"overview",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Configuration",id:"1-configuration",level:3},{value:"2. Create an Entity",id:"2-create-an-entity",level:3},{value:"3. Create a Repository",id:"3-create-a-repository",level:3},{value:"4. Create a Service",id:"4-create-a-service",level:3},{value:"5. Use in Controller",id:"5-use-in-controller",level:3},{value:"Configuration Options",id:"configuration-options",level:2},{value:"Database Configuration",id:"database-configuration",level:3},{value:"JPA/Hibernate Configuration",id:"jpahibernate-configuration",level:3},{value:"H2 Console Configuration",id:"h2-console-configuration",level:3},{value:"Supported Databases",id:"supported-databases",level:2},{value:"H2 (Development)",id:"h2-development",level:3},{value:"MySQL (Production)",id:"mysql-production",level:3},{value:"PostgreSQL (Production)",id:"postgresql-production",level:3},{value:"Entity Relationships",id:"entity-relationships",level:2},{value:"One-to-Many",id:"one-to-many",level:3},{value:"Many-to-Many",id:"many-to-many",level:3},{value:"Transaction Management",id:"transaction-management",level:2},{value:"Performance Optimization",id:"performance-optimization",level:2},{value:"Connection Pooling",id:"connection-pooling",level:3},{value:"Query Optimization",id:"query-optimization",level:3},{value:"Lazy Loading",id:"lazy-loading",level:3},{value:"Error Handling",id:"error-handling",level:2},{value:"Migration from Manual Data Handling",id:"migration-from-manual-data-handling",level:2},{value:"Before (Manual)",id:"before-manual",level:3},{value:"After (Database)",id:"after-database",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Repository Design",id:"1-repository-design",level:3},{value:"2. Service Layer",id:"2-service-layer",level:3},{value:"3. Entity Design",id:"3-entity-design",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Common Issues",id:"common-issues",level:3},{value:"Debug Mode",id:"debug-mode",level:3},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.header,{children:(0,i.jsx)(r.h1,{id:"database-integration",children:"Database Integration"})}),"\n",(0,i.jsx)(r.p,{children:"Jazzy Framework 0.3 introduces comprehensive database integration with Spring Data JPA-like functionality. The framework provides automatic entity discovery, repository pattern implementation, and zero-configuration database setup."}),"\n",(0,i.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(r.p,{children:"The database integration system provides:"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Hibernate/JPA Integration"}),": Full ORM support with automatic configuration"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Spring Data JPA-like Repositories"}),": Familiar repository pattern with automatic implementation"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Method Name Parsing"}),": Automatic query generation from method names"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Custom Query Support"}),": @Query annotation for HQL/JPQL and native SQL"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Transaction Management"}),": Automatic transaction handling with proper rollback"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Entity Discovery"}),": Automatic entity scanning and configuration"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Connection Pooling"}),": HikariCP for production-ready database connections"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.strong,{children:"Multiple Database Support"}),": H2, PostgreSQL, MySQL, Oracle support"]}),"\n"]}),"\n",(0,i.jsx)(r.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,i.jsx)(r.h3,{id:"1-configuration",children:"1. Configuration"}),"\n",(0,i.jsxs)(r.p,{children:["Create ",(0,i.jsx)(r.code,{children:"application.properties"})," in your ",(0,i.jsx)(r.code,{children:"src/main/resources"})," folder:"]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Database Configuration\r\njazzy.datasource.url=jdbc:h2:mem:testdb\r\njazzy.datasource.username=sa\r\njazzy.datasource.password=\r\njazzy.datasource.driver-class-name=org.h2.Driver\r\n\r\n# JPA/Hibernate Configuration\r\njazzy.jpa.hibernate.ddl-auto=create-drop\r\njazzy.jpa.show-sql=true\r\njazzy.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect\r\n\r\n# H2 Console (for development)\r\njazzy.h2.console.enabled=true\r\njazzy.h2.console.path=/h2-console\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-create-an-entity",children:"2. Create an Entity"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'package com.example.entity;\r\n\r\nimport jakarta.persistence.*;\r\n\r\n@Entity\r\n@Table(name = "users")\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @Column(unique = true, nullable = false)\r\n    private String email;\r\n    \r\n    @Column(nullable = false)\r\n    private String name;\r\n    \r\n    private String password;\r\n    private boolean active = true;\r\n    \r\n    // Constructors\r\n    public User() {}\r\n    \r\n    public User(String name, String email, String password) {\r\n        this.name = name;\r\n        this.email = email;\r\n        this.password = password;\r\n    }\r\n    \r\n    // Getters and setters\r\n    public Long getId() { return id; }\r\n    public void setId(Long id) { this.id = id; }\r\n    \r\n    public String getEmail() { return email; }\r\n    public void setEmail(String email) { this.email = email; }\r\n    \r\n    public String getName() { return name; }\r\n    public void setName(String name) { this.name = name; }\r\n    \r\n    public String getPassword() { return password; }\r\n    public void setPassword(String password) { this.password = password; }\r\n    \r\n    public boolean isActive() { return active; }\r\n    public void setActive(boolean active) { this.active = active; }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"3-create-a-repository",children:"3. Create a Repository"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'package com.example.repository;\r\n\r\nimport com.example.entity.User;\r\nimport jazzyframework.data.BaseRepository;\r\nimport jazzyframework.data.annotations.Query;\r\nimport jazzyframework.data.annotations.Modifying;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Automatic query generation from method names\r\n    Optional<User> findByEmail(String email);\r\n    List<User> findByActive(boolean active);\r\n    List<User> findByNameContaining(String name);\r\n    long countByActive(boolean active);\r\n    boolean existsByEmail(String email);\r\n    \r\n    // Custom HQL/JPQL queries\r\n    @Query("SELECT u FROM User u WHERE u.email = :email AND u.active = true")\r\n    Optional<User> findActiveUserByEmail(String email);\r\n    \r\n    @Query("SELECT u FROM User u WHERE u.name LIKE %:name% ORDER BY u.name")\r\n    List<User> searchByName(String name);\r\n    \r\n    // Native SQL queries\r\n    @Query(value = "SELECT * FROM users WHERE email = ?1", nativeQuery = true)\r\n    Optional<User> findByEmailNative(String email);\r\n    \r\n    // Update operations\r\n    @Query("UPDATE User u SET u.active = :active WHERE u.email = :email")\r\n    @Modifying\r\n    int updateUserActiveStatus(String email, boolean active);\r\n    \r\n    @Query("DELETE FROM User u WHERE u.active = false")\r\n    @Modifying\r\n    int deleteInactiveUsers();\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"4-create-a-service",children:"4. Create a Service"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'package com.example.service;\r\n\r\nimport com.example.entity.User;\r\nimport com.example.repository.UserRepository;\r\nimport jazzyframework.di.annotations.Component;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\n@Component\r\npublic class UserService {\r\n    private final UserRepository userRepository;\r\n    \r\n    public UserService(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n    \r\n    public User createUser(String name, String email, String password) {\r\n        // Business logic validation\r\n        if (userRepository.existsByEmail(email)) {\r\n            throw new IllegalArgumentException("User with email " + email + " already exists");\r\n        }\r\n        \r\n        User user = new User(name, email, password);\r\n        return userRepository.save(user);\r\n    }\r\n    \r\n    public Optional<User> findByEmail(String email) {\r\n        return userRepository.findByEmail(email);\r\n    }\r\n    \r\n    public List<User> findActiveUsers() {\r\n        return userRepository.findByActive(true);\r\n    }\r\n    \r\n    public List<User> searchUsers(String name) {\r\n        return userRepository.findByNameContaining(name);\r\n    }\r\n    \r\n    public boolean deactivateUser(String email) {\r\n        int updated = userRepository.updateUserActiveStatus(email, false);\r\n        return updated > 0;\r\n    }\r\n    \r\n    public long getActiveUserCount() {\r\n        return userRepository.countByActive(true);\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"5-use-in-controller",children:"5. Use in Controller"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'package com.example.controller;\r\n\r\nimport com.example.entity.User;\r\nimport com.example.service.UserService;\r\nimport jazzyframework.di.annotations.Component;\r\nimport jazzyframework.http.Request;\r\nimport jazzyframework.http.Response;\r\nimport jazzyframework.http.JSON;\r\n\r\nimport java.util.List;\r\nimport java.util.Map;\r\nimport java.util.Optional;\r\n\r\n@Component\r\npublic class UserController {\r\n    private final UserService userService;\r\n    \r\n    public UserController(UserService userService) {\r\n        this.userService = userService;\r\n    }\r\n    \r\n    public Response createUser(Request request) {\r\n        User user = request.toObject(User.class);\r\n        User createdUser = userService.createUser(user.getName(), user.getEmail(), user.getPassword());\r\n        return Response.json(JSON.of("user", createdUser));\r\n    }\r\n    \r\n    public Response getUserByEmail(Request request) {\r\n        String email = request.query("email");\r\n        Optional<User> user = userService.findByEmail(email);\r\n        \r\n        if (user.isPresent()) {\r\n            return Response.json(JSON.of("user", user.get()));\r\n        } else {\r\n            return Response.json(JSON.of("error", "User not found")).status(404);\r\n        }\r\n    }\r\n    \r\n    public Response getActiveUsers(Request request) {\r\n        List<User> users = userService.findActiveUsers();\r\n        return Response.json(JSON.of("users", users, "count", users.size()));\r\n    }\r\n    \r\n    public Response searchUsers(Request request) {\r\n        String name = request.query("name");\r\n        List<User> users = userService.searchUsers(name);\r\n        return Response.json(JSON.of("users", users));\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"configuration-options",children:"Configuration Options"}),"\n",(0,i.jsx)(r.h3,{id:"database-configuration",children:"Database Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Database Connection\r\njazzy.datasource.url=jdbc:h2:mem:testdb\r\njazzy.datasource.username=sa\r\njazzy.datasource.password=\r\njazzy.datasource.driver-class-name=org.h2.Driver\r\n\r\n# Connection Pool (HikariCP)\r\njazzy.datasource.hikari.maximum-pool-size=10\r\njazzy.datasource.hikari.minimum-idle=5\r\njazzy.datasource.hikari.connection-timeout=30000\r\njazzy.datasource.hikari.idle-timeout=600000\r\njazzy.datasource.hikari.max-lifetime=1800000\n"})}),"\n",(0,i.jsx)(r.h3,{id:"jpahibernate-configuration",children:"JPA/Hibernate Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Schema Management\r\njazzy.jpa.hibernate.ddl-auto=create-drop  # create, update, validate, none\r\n\r\n# SQL Logging\r\njazzy.jpa.show-sql=true\r\njazzy.jpa.hibernate.format_sql=true\r\n\r\n# Dialect (auto-detected if not specified)\r\njazzy.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect\r\n\r\n# Performance Settings\r\njazzy.jpa.properties.hibernate.jdbc.batch_size=20\r\njazzy.jpa.properties.hibernate.order_inserts=true\r\njazzy.jpa.properties.hibernate.order_updates=true\n"})}),"\n",(0,i.jsx)(r.h3,{id:"h2-console-configuration",children:"H2 Console Configuration"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# H2 Console (Development Only)\r\njazzy.h2.console.enabled=true\r\njazzy.h2.console.path=/h2-console\r\njazzy.h2.console.port=8082\n"})}),"\n",(0,i.jsx)(r.h2,{id:"supported-databases",children:"Supported Databases"}),"\n",(0,i.jsx)(r.h3,{id:"h2-development",children:"H2 (Development)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"jazzy.datasource.url=jdbc:h2:mem:testdb\r\njazzy.datasource.driver-class-name=org.h2.Driver\r\njazzy.jpa.hibernate.dialect=org.hibernate.dialect.H2Dialect\n"})}),"\n",(0,i.jsx)(r.h3,{id:"mysql-production",children:"MySQL (Production)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"jazzy.datasource.url=jdbc:mysql://localhost:3306/myapp\r\njazzy.datasource.username=myuser\r\njazzy.datasource.password=mypassword\r\njazzy.datasource.driver-class-name=com.mysql.cj.jdbc.Driver\r\njazzy.jpa.hibernate.dialect=org.hibernate.dialect.MySQL8Dialect\n"})}),"\n",(0,i.jsx)(r.h3,{id:"postgresql-production",children:"PostgreSQL (Production)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"jazzy.datasource.url=jdbc:postgresql://localhost:5432/myapp\r\njazzy.datasource.username=myuser\r\njazzy.datasource.password=mypassword\r\njazzy.datasource.driver-class-name=org.postgresql.Driver\r\njazzy.jpa.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n"})}),"\n",(0,i.jsx)(r.h2,{id:"entity-relationships",children:"Entity Relationships"}),"\n",(0,i.jsx)(r.h3,{id:"one-to-many",children:"One-to-Many"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @OneToMany(mappedBy = "user", cascade = CascadeType.ALL, fetch = FetchType.LAZY)\r\n    private List<Post> posts = new ArrayList<>();\r\n    \r\n    // getters and setters\r\n}\r\n\r\n@Entity\r\npublic class Post {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToOne(fetch = FetchType.LAZY)\r\n    @JoinColumn(name = "user_id")\r\n    private User user;\r\n    \r\n    // getters and setters\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"many-to-many",children:"Many-to-Many"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@Entity\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToMany\r\n    @JoinTable(\r\n        name = "user_roles",\r\n        joinColumns = @JoinColumn(name = "user_id"),\r\n        inverseJoinColumns = @JoinColumn(name = "role_id")\r\n    )\r\n    private Set<Role> roles = new HashSet<>();\r\n    \r\n    // getters and setters\r\n}\r\n\r\n@Entity\r\npublic class Role {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @ManyToMany(mappedBy = "roles")\r\n    private Set<User> users = new HashSet<>();\r\n    \r\n    // getters and setters\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"transaction-management",children:"Transaction Management"}),"\n",(0,i.jsx)(r.p,{children:"Transactions are automatically managed at the repository level. Each repository method runs in its own transaction:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'// Automatic transaction management\r\npublic User createUser(String name, String email) {\r\n    User user = new User(name, email);\r\n    return userRepository.save(user);  // Automatically wrapped in transaction\r\n}\r\n\r\n// Multiple operations in same transaction\r\npublic void transferData() {\r\n    // For complex operations requiring multiple repository calls,\r\n    // consider implementing custom repository methods\r\n    userRepository.updateUserStatus(email, "ACTIVE");\r\n    userRepository.updateLastLogin(email, new Date());\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"performance-optimization",children:"Performance Optimization"}),"\n",(0,i.jsx)(r.h3,{id:"connection-pooling",children:"Connection Pooling"}),"\n",(0,i.jsx)(r.p,{children:"HikariCP is automatically configured for optimal performance:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Optimize for your application\r\njazzy.datasource.hikari.maximum-pool-size=20\r\njazzy.datasource.hikari.minimum-idle=5\r\njazzy.datasource.hikari.connection-timeout=30000\n"})}),"\n",(0,i.jsx)(r.h3,{id:"query-optimization",children:"Query Optimization"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"// Use specific queries instead of findAll()\r\nList<User> findByActive(boolean active);  // Better than findAll() + filter\r\n\r\n// Use count queries for existence checks\r\nboolean existsByEmail(String email);  // Better than findByEmail().isPresent()\r\n\r\n// Use batch operations for multiple inserts\r\nList<User> saveAll(Iterable<User> users);\n"})}),"\n",(0,i.jsx)(r.h3,{id:"lazy-loading",children:"Lazy Loading"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'@Entity\r\npublic class User {\r\n    @OneToMany(mappedBy = "user", fetch = FetchType.LAZY)  // Lazy by default\r\n    private List<Post> posts;\r\n    \r\n    @ManyToOne(fetch = FetchType.EAGER)  // Only when always needed\r\n    private Department department;\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"error-handling",children:"Error Handling"}),"\n",(0,i.jsx)(r.p,{children:"The framework provides automatic error handling for common database scenarios:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'try {\r\n    User user = userService.createUser(name, email, password);\r\n    return Response.json(JSON.of("user", user));\r\n} catch (IllegalArgumentException e) {\r\n    // Business logic errors (e.g., duplicate email)\r\n    return Response.json(JSON.of("error", e.getMessage())).status(400);\r\n} catch (Exception e) {\r\n    // Database errors are automatically handled by framework\r\n    return Response.json(JSON.of("error", "Internal server error")).status(500);\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"migration-from-manual-data-handling",children:"Migration from Manual Data Handling"}),"\n",(0,i.jsx)(r.p,{children:"If you're migrating from manual data handling to database integration:"}),"\n",(0,i.jsx)(r.h3,{id:"before-manual",children:"Before (Manual)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"@Component\r\npublic class UserService {\r\n    private final List<User> users = new ArrayList<>();\r\n    \r\n    public User createUser(String name, String email) {\r\n        User user = new User(name, email);\r\n        users.add(user);\r\n        return user;\r\n    }\r\n    \r\n    public Optional<User> findByEmail(String email) {\r\n        return users.stream()\r\n            .filter(u -> u.getEmail().equals(email))\r\n            .findFirst();\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"after-database",children:"After (Database)"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"@Component\r\npublic class UserService {\r\n    private final UserRepository userRepository;\r\n    \r\n    public UserService(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n    \r\n    public User createUser(String name, String email) {\r\n        User user = new User(name, email);\r\n        return userRepository.save(user);  // Automatically persisted\r\n    }\r\n    \r\n    public Optional<User> findByEmail(String email) {\r\n        return userRepository.findByEmail(email);  // Database query\r\n    }\r\n}\n"})}),"\n",(0,i.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,i.jsx)(r.h3,{id:"1-repository-design",children:"1. Repository Design"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:"// Good: Specific, focused repository\r\npublic interface UserRepository extends BaseRepository<User, Long> {\r\n    Optional<User> findByEmail(String email);\r\n    List<User> findByActive(boolean active);\r\n    long countByDepartment(String department);\r\n}\r\n\r\n// Avoid: Generic, unfocused repository\r\npublic interface DataRepository extends BaseRepository<Object, Long> {\r\n    // Too generic, hard to maintain\r\n}\n"})}),"\n",(0,i.jsx)(r.h3,{id:"2-service-layer",children:"2. Service Layer"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'// Good: Business logic in service layer\r\n@Component\r\npublic class UserService {\r\n    public User createUser(String name, String email) {\r\n        // Validation\r\n        if (userRepository.existsByEmail(email)) {\r\n            throw new IllegalArgumentException("Email already exists");\r\n        }\r\n        \r\n        // Business logic\r\n        User user = new User(name, email);\r\n        user.setCreatedAt(new Date());\r\n        \r\n        return userRepository.save(user);\r\n    }\r\n}\r\n\r\n// Avoid: Business logic in controller\r\n@Component\r\npublic class UserController {\r\n    public Response createUser(Request request) {\r\n        // Don\'t put business logic here\r\n        User user = request.toObject(User.class);\r\n        return Response.json(userRepository.save(user));\r\n    }\r\n}\n'})}),"\n",(0,i.jsx)(r.h3,{id:"3-entity-design",children:"3. Entity Design"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-java",children:'// Good: Proper JPA annotations\r\n@Entity\r\n@Table(name = "users", indexes = {\r\n    @Index(name = "idx_user_email", columnList = "email"),\r\n    @Index(name = "idx_user_active", columnList = "active")\r\n})\r\npublic class User {\r\n    @Id\r\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\r\n    private Long id;\r\n    \r\n    @Column(unique = true, nullable = false, length = 255)\r\n    private String email;\r\n    \r\n    @Column(nullable = false, length = 100)\r\n    private String name;\r\n    \r\n    // Proper getters and setters\r\n}\n'})}),"\n",(0,i.jsx)(r.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,i.jsx)(r.h3,{id:"common-issues",children:"Common Issues"}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:'1. "No repository found" error'})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Ensure your repository interface extends ",(0,i.jsx)(r.code,{children:"BaseRepository"})]}),"\n",(0,i.jsx)(r.li,{children:"Check that your repository is in a package that gets scanned"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:'2. "Entity not found" error'})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Verify your entity has ",(0,i.jsx)(r.code,{children:"@Entity"})," annotation"]}),"\n",(0,i.jsx)(r.li,{children:"Check that entity is in a package that gets scanned"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"3. Database connection errors"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:["Verify ",(0,i.jsx)(r.code,{children:"application.properties"})," configuration"]}),"\n",(0,i.jsx)(r.li,{children:"Check database driver is in classpath"}),"\n",(0,i.jsx)(r.li,{children:"Ensure database server is running (for external databases)"}),"\n"]}),"\n",(0,i.jsx)(r.p,{children:(0,i.jsx)(r.strong,{children:"4. Query parsing errors"})}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsx)(r.li,{children:"Check method name follows naming conventions"}),"\n",(0,i.jsxs)(r.li,{children:["Use ",(0,i.jsx)(r.code,{children:"@Query"})," annotation for complex queries"]}),"\n",(0,i.jsx)(r.li,{children:"Verify parameter names match method parameters"}),"\n"]}),"\n",(0,i.jsx)(r.h3,{id:"debug-mode",children:"Debug Mode"}),"\n",(0,i.jsx)(r.p,{children:"Enable debug logging to troubleshoot issues:"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-properties",children:"# Enable SQL logging\r\njazzy.jpa.show-sql=true\r\njazzy.jpa.hibernate.format_sql=true\r\n\r\n# Enable Hibernate logging\r\nlogging.level.org.hibernate.SQL=DEBUG\r\nlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE\n"})}),"\n",(0,i.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,i.jsxs)(r.ul,{children:["\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/jazzy-framework/docs/repositories",children:"Repository Pattern"})," - Deep dive into repository interfaces"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"/jazzy-framework/docs/query-methods",children:"Query Methods"})," - Method name parsing and custom queries"]}),"\n",(0,i.jsxs)(r.li,{children:[(0,i.jsx)(r.a,{href:"database-examples.md",children:"Database Examples"})," - Complete working examples"]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>o});var a=n(6540);const i={},t=a.createContext(i);function s(e){const r=a.useContext(t);return a.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),a.createElement(t.Provider,{value:r},e.children)}}}]);