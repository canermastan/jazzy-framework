"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[7],{5455:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>c,frontMatter:()=>s,metadata:()=>i,toc:()=>o});const i=JSON.parse('{"id":"query-methods","title":"Query Methods","description":"Jazzy Framework provides powerful query method capabilities that automatically generate database queries from method names, similar to Spring Data JPA. This feature eliminates the need to write SQL for common query patterns while maintaining type safety and readability.","source":"@site/docs/query-methods.md","sourceDirName":".","slug":"/query-methods","permalink":"/jazzy-framework/docs/query-methods","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/query-methods.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Repository Pattern","permalink":"/jazzy-framework/docs/repositories"},"next":{"title":"JSON Operations","permalink":"/jazzy-framework/docs/json"}}');var t=r(4848),a=r(8453);const s={},l="Query Methods",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Method Name Query Generation",id:"method-name-query-generation",level:2},{value:"Basic Syntax",id:"basic-syntax",level:3},{value:"Supported Operations",id:"supported-operations",level:3},{value:"Property Conditions",id:"property-conditions",level:3},{value:"Equality",id:"equality",level:4},{value:"Comparison Operations",id:"comparison-operations",level:4},{value:"String Operations",id:"string-operations",level:4},{value:"Null Checks",id:"null-checks",level:4},{value:"Boolean Operations",id:"boolean-operations",level:4},{value:"Collection Operations",id:"collection-operations",level:4},{value:"Logical Operators",id:"logical-operators",level:3},{value:"AND Operations",id:"and-operations",level:4},{value:"OR Operations",id:"or-operations",level:4},{value:"Complex Combinations",id:"complex-combinations",level:4},{value:"Ordering",id:"ordering",level:3},{value:"Return Types",id:"return-types",level:3},{value:"Optional for Single Results",id:"optional-for-single-results",level:4},{value:"Lists for Multiple Results",id:"lists-for-multiple-results",level:4},{value:"Primitive Types for Counts and Checks",id:"primitive-types-for-counts-and-checks",level:4},{value:"Custom Queries with @Query",id:"custom-queries-with-query",level:2},{value:"HQL/JPQL Queries",id:"hqljpql-queries",level:3},{value:"Native SQL Queries",id:"native-sql-queries",level:3},{value:"Modifying Queries",id:"modifying-queries",level:3},{value:"Parameter Binding",id:"parameter-binding",level:2},{value:"Named Parameters",id:"named-parameters",level:3},{value:"Positional Parameters",id:"positional-parameters",level:3},{value:"Collection Parameters",id:"collection-parameters",level:3},{value:"Advanced Query Patterns",id:"advanced-query-patterns",level:2},{value:"Pagination and Limiting",id:"pagination-and-limiting",level:3},{value:"Distinct Results",id:"distinct-results",level:3},{value:"Case Insensitive Queries",id:"case-insensitive-queries",level:3},{value:"Date and Time Queries",id:"date-and-time-queries",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2},{value:"Index Usage",id:"index-usage",level:3},{value:"Query Optimization",id:"query-optimization",level:3},{value:"Batch Operations",id:"batch-operations",level:3},{value:"Error Handling and Debugging",id:"error-handling-and-debugging",level:2},{value:"Common Errors",id:"common-errors",level:3},{value:"Debug Query Generation",id:"debug-query-generation",level:3},{value:"Testing Query Methods",id:"testing-query-methods",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Method Naming",id:"1-method-naming",level:3},{value:"2. Return Types",id:"2-return-types",level:3},{value:"3. Query Complexity",id:"3-query-complexity",level:3},{value:"4. Performance",id:"4-performance",level:3},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"query-methods",children:"Query Methods"})}),"\n",(0,t.jsx)(n.p,{children:"Jazzy Framework provides powerful query method capabilities that automatically generate database queries from method names, similar to Spring Data JPA. This feature eliminates the need to write SQL for common query patterns while maintaining type safety and readability."}),"\n",(0,t.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(n.p,{children:"Query methods in Jazzy support:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Method Name Parsing"}),": Automatic query generation from method names"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Custom Queries"}),": @Query annotation for complex HQL/JPQL and native SQL"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Parameter Binding"}),": Automatic parameter mapping and type conversion"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Return Type Flexibility"}),": Support for Optional, List, primitives, and custom types"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.strong,{children:"Performance Optimization"}),": Database-level filtering instead of memory operations"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"method-name-query-generation",children:"Method Name Query Generation"}),"\n",(0,t.jsx)(n.h3,{id:"basic-syntax",children:"Basic Syntax"}),"\n",(0,t.jsxs)(n.p,{children:["Query methods follow the pattern: ",(0,t.jsx)(n.code,{children:"<operation>By<property><condition>"})]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Basic pattern examples\r\nOptional<User> findByEmail(String email);           // SELECT u FROM User u WHERE u.email = ?1\r\nList<User> findByActive(boolean active);            // SELECT u FROM User u WHERE u.active = ?1\r\nlong countByActive(boolean active);                 // SELECT COUNT(u) FROM User u WHERE u.active = ?1\r\nboolean existsByEmail(String email);               // SELECT COUNT(u) FROM User u WHERE u.email = ?1 > 0\r\nvoid deleteByActive(boolean active);               // DELETE FROM User u WHERE u.active = ?1\n"})}),"\n",(0,t.jsx)(n.h3,{id:"supported-operations",children:"Supported Operations"}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Operation"}),(0,t.jsx)(n.th,{children:"Description"}),(0,t.jsx)(n.th,{children:"Example"}),(0,t.jsx)(n.th,{children:"Generated Query"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"find"})}),(0,t.jsx)(n.td,{children:"Retrieve entities"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"findByEmail"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SELECT u FROM User u WHERE u.email = ?1"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"count"})}),(0,t.jsx)(n.td,{children:"Count entities"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"countByActive"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SELECT COUNT(u) FROM User u WHERE u.active = ?1"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"exists"})}),(0,t.jsx)(n.td,{children:"Check existence"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"existsByEmail"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"SELECT COUNT(u) FROM User u WHERE u.email = ?1 > 0"})})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"delete"})}),(0,t.jsx)(n.td,{children:"Delete entities"}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"deleteByActive"})}),(0,t.jsx)(n.td,{children:(0,t.jsx)(n.code,{children:"DELETE FROM User u WHERE u.active = ?1"})})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"property-conditions",children:"Property Conditions"}),"\n",(0,t.jsx)(n.h4,{id:"equality",children:"Equality"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Simple equality\r\nOptional<User> findByEmail(String email);\r\nList<User> findByName(String name);\r\nList<User> findByActive(boolean active);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.email = :email\r\n// SELECT u FROM User u WHERE u.name = :name\r\n// SELECT u FROM User u WHERE u.active = :active\n"})}),"\n",(0,t.jsx)(n.h4,{id:"comparison-operations",children:"Comparison Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Numeric comparisons\r\nList<User> findByAgeGreaterThan(int age);\r\nList<User> findByAgeLessThan(int age);\r\nList<User> findByAgeGreaterThanEqual(int age);\r\nList<User> findByAgeLessThanEqual(int age);\r\nList<User> findByAgeBetween(int minAge, int maxAge);\r\n\r\n// Date comparisons\r\nList<User> findByCreatedDateAfter(Date date);\r\nList<User> findByCreatedDateBefore(Date date);\r\nList<User> findByCreatedDateBetween(Date start, Date end);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.age > :age\r\n// SELECT u FROM User u WHERE u.age < :age\r\n// SELECT u FROM User u WHERE u.age >= :age\r\n// SELECT u FROM User u WHERE u.age <= :age\r\n// SELECT u FROM User u WHERE u.age BETWEEN :minAge AND :maxAge\n"})}),"\n",(0,t.jsx)(n.h4,{id:"string-operations",children:"String Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// String matching\r\nList<User> findByNameLike(String pattern);\r\nList<User> findByNameContaining(String substring);\r\nList<User> findByNameStartingWith(String prefix);\r\nList<User> findByNameEndingWith(String suffix);\r\nList<User> findByNameIgnoreCase(String name);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.name LIKE :pattern\r\n// SELECT u FROM User u WHERE u.name LIKE %:substring%\r\n// SELECT u FROM User u WHERE u.name LIKE :prefix%\r\n// SELECT u FROM User u WHERE u.name LIKE %:suffix\r\n// SELECT u FROM User u WHERE UPPER(u.name) = UPPER(:name)\n"})}),"\n",(0,t.jsx)(n.h4,{id:"null-checks",children:"Null Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Null/Not null checks\r\nList<User> findByLastLoginIsNull();\r\nList<User> findByLastLoginIsNotNull();\r\nList<User> findByEmailNull();\r\nList<User> findByEmailNotNull();\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.lastLogin IS NULL\r\n// SELECT u FROM User u WHERE u.lastLogin IS NOT NULL\r\n// SELECT u FROM User u WHERE u.email IS NULL\r\n// SELECT u FROM User u WHERE u.email IS NOT NULL\n"})}),"\n",(0,t.jsx)(n.h4,{id:"boolean-operations",children:"Boolean Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Boolean values\r\nList<User> findByActiveTrue();\r\nList<User> findByActiveFalse();\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.active = true\r\n// SELECT u FROM User u WHERE u.active = false\n"})}),"\n",(0,t.jsx)(n.h4,{id:"collection-operations",children:"Collection Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// In/Not in collections\r\nList<User> findByAgeIn(Collection<Integer> ages);\r\nList<User> findByAgeNotIn(Collection<Integer> ages);\r\nList<User> findByStatusIn(List<String> statuses);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.age IN :ages\r\n// SELECT u FROM User u WHERE u.age NOT IN :ages\r\n// SELECT u FROM User u WHERE u.status IN :statuses\n"})}),"\n",(0,t.jsx)(n.h3,{id:"logical-operators",children:"Logical Operators"}),"\n",(0,t.jsx)(n.h4,{id:"and-operations",children:"AND Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Multiple conditions with AND\r\nOptional<User> findByEmailAndActive(String email, boolean active);\r\nList<User> findByNameAndAgeGreaterThan(String name, int age);\r\nList<User> findByActiveAndCreatedDateAfter(boolean active, Date date);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.email = :email AND u.active = :active\r\n// SELECT u FROM User u WHERE u.name = :name AND u.age > :age\r\n// SELECT u FROM User u WHERE u.active = :active AND u.createdDate > :date\n"})}),"\n",(0,t.jsx)(n.h4,{id:"or-operations",children:"OR Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Multiple conditions with OR\r\nList<User> findByNameOrEmail(String name, String email);\r\nList<User> findByActiveOrVerified(boolean active, boolean verified);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.name = :name OR u.email = :email\r\n// SELECT u FROM User u WHERE u.active = :active OR u.verified = :verified\n"})}),"\n",(0,t.jsx)(n.h4,{id:"complex-combinations",children:"Complex Combinations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Complex logical combinations\r\nList<User> findByActiveAndNameContainingOrEmailContaining(\r\n    boolean active, String namePattern, String emailPattern);\r\n\r\n// Generated query\r\n// SELECT u FROM User u WHERE u.active = :active AND \r\n// (u.name LIKE %:namePattern% OR u.email LIKE %:emailPattern%)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"ordering",children:"Ordering"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Single property ordering\r\nList<User> findByActiveOrderByNameAsc(boolean active);\r\nList<User> findByActiveOrderByNameDesc(boolean active);\r\nList<User> findByActiveOrderByCreatedDateDesc(boolean active);\r\n\r\n// Multiple property ordering\r\nList<User> findByActiveOrderByNameAscAgeDesc(boolean active);\r\nList<User> findByDepartmentOrderByNameAscCreatedDateDesc(String department);\r\n\r\n// Generated queries\r\n// SELECT u FROM User u WHERE u.active = :active ORDER BY u.name ASC\r\n// SELECT u FROM User u WHERE u.active = :active ORDER BY u.name DESC\r\n// SELECT u FROM User u WHERE u.active = :active ORDER BY u.name ASC, u.age DESC\n"})}),"\n",(0,t.jsx)(n.h3,{id:"return-types",children:"Return Types"}),"\n",(0,t.jsx)(n.h4,{id:"optional-for-single-results",children:"Optional for Single Results"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Single result that might not exist\r\nOptional<User> findByEmail(String email);\r\nOptional<User> findByIdAndActive(Long id, boolean active);\r\n\r\n// Framework automatically wraps single results in Optional\n"})}),"\n",(0,t.jsx)(n.h4,{id:"lists-for-multiple-results",children:"Lists for Multiple Results"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Multiple results\r\nList<User> findByActive(boolean active);\r\nList<User> findByAgeGreaterThan(int age);\r\nList<User> findByNameContaining(String pattern);\r\n\r\n// Empty list returned if no results found\n"})}),"\n",(0,t.jsx)(n.h4,{id:"primitive-types-for-counts-and-checks",children:"Primitive Types for Counts and Checks"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Count operations\r\nlong countByActive(boolean active);\r\nlong countByAgeGreaterThan(int age);\r\n\r\n// Existence checks\r\nboolean existsByEmail(String email);\r\nboolean existsByEmailAndActive(String email, boolean active);\r\n\r\n// Delete operations (returns count of deleted entities)\r\nlong deleteByActive(boolean active);\r\nint deleteByAgeGreaterThan(int age);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"custom-queries-with-query",children:"Custom Queries with @Query"}),"\n",(0,t.jsx)(n.p,{children:"For complex queries that can't be expressed through method names:"}),"\n",(0,t.jsx)(n.h3,{id:"hqljpql-queries",children:"HQL/JPQL Queries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Simple custom query\r\n    @Query("SELECT u FROM User u WHERE u.email = :email AND u.active = true")\r\n    Optional<User> findActiveUserByEmail(String email);\r\n    \r\n    // Query with joins\r\n    @Query("SELECT u FROM User u JOIN u.department d WHERE d.name = :deptName")\r\n    List<User> findUsersByDepartmentName(String deptName);\r\n    \r\n    // Aggregate queries\r\n    @Query("SELECT COUNT(u) FROM User u WHERE u.createdDate > :date")\r\n    long countUsersCreatedAfter(Date date);\r\n    \r\n    @Query("SELECT AVG(u.age) FROM User u WHERE u.active = true")\r\n    Double getAverageAgeOfActiveUsers();\r\n    \r\n    // Subqueries\r\n    @Query("""\r\n        SELECT u FROM User u \r\n        WHERE u.id IN (\r\n            SELECT p.user.id FROM Post p \r\n            WHERE p.published = true AND p.createdDate > :date\r\n        )\r\n        """)\r\n    List<User> findUsersWithRecentPublishedPosts(Date date);\r\n    \r\n    // Complex conditions\r\n    @Query("""\r\n        SELECT u FROM User u \r\n        WHERE u.active = true \r\n        AND u.department.name = :dept \r\n        AND u.createdDate BETWEEN :startDate AND :endDate\r\n        ORDER BY u.name ASC\r\n        """)\r\n    List<User> findActiveUsersByDepartmentAndDateRange(\r\n        String dept, Date startDate, Date endDate);\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"native-sql-queries",children:"Native SQL Queries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Simple native query\r\n    @Query(value = "SELECT * FROM users WHERE email = ?1", nativeQuery = true)\r\n    Optional<User> findByEmailNative(String email);\r\n    \r\n    // Complex native query with joins\r\n    @Query(value = """\r\n        SELECT u.*, d.name as dept_name \r\n        FROM users u \r\n        LEFT JOIN departments d ON u.department_id = d.id \r\n        WHERE u.active = true \r\n        AND d.name = :deptName\r\n        ORDER BY u.name\r\n        """, nativeQuery = true)\r\n    List<User> findActiveUsersByDepartmentNative(String deptName);\r\n    \r\n    // Native aggregate query\r\n    @Query(value = """\r\n        SELECT COUNT(*) \r\n        FROM users u \r\n        WHERE u.created_date > :date \r\n        AND u.active = true\r\n        """, nativeQuery = true)\r\n    long countActiveUsersCreatedAfter(Date date);\r\n    \r\n    // Database-specific features\r\n    @Query(value = """\r\n        SELECT u.* FROM users u \r\n        WHERE MATCH(u.name, u.email) AGAINST (:searchTerm IN NATURAL LANGUAGE MODE)\r\n        """, nativeQuery = true)\r\n    List<User> fullTextSearch(String searchTerm);  // MySQL specific\r\n}\n'})}),"\n",(0,t.jsx)(n.h3,{id:"modifying-queries",children:"Modifying Queries"}),"\n",(0,t.jsxs)(n.p,{children:["Use ",(0,t.jsx)(n.code,{children:"@Modifying"})," for UPDATE, DELETE, or INSERT operations:"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Update operations\r\n    @Query("UPDATE User u SET u.active = :active WHERE u.email = :email")\r\n    @Modifying\r\n    int updateUserActiveStatus(String email, boolean active);\r\n    \r\n    @Query("UPDATE User u SET u.lastLogin = CURRENT_TIMESTAMP WHERE u.id = :id")\r\n    @Modifying\r\n    int updateLastLogin(Long id);\r\n    \r\n    // Bulk updates\r\n    @Query("UPDATE User u SET u.active = false WHERE u.lastLogin < :cutoffDate")\r\n    @Modifying\r\n    int deactivateInactiveUsers(Date cutoffDate);\r\n    \r\n    @Query("UPDATE User u SET u.verified = true WHERE u.email IN :emails")\r\n    @Modifying\r\n    int verifyUsersByEmails(List<String> emails);\r\n    \r\n    // Delete operations\r\n    @Query("DELETE FROM User u WHERE u.active = false AND u.createdDate < :cutoffDate")\r\n    @Modifying\r\n    int deleteOldInactiveUsers(Date cutoffDate);\r\n    \r\n    // Native modifying queries\r\n    @Query(value = "UPDATE users SET login_count = login_count + 1 WHERE id = ?1", \r\n           nativeQuery = true)\r\n    @Modifying\r\n    int incrementLoginCount(Long userId);\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"parameter-binding",children:"Parameter Binding"}),"\n",(0,t.jsx)(n.h3,{id:"named-parameters",children:"Named Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// HQL with named parameters\r\n@Query("SELECT u FROM User u WHERE u.name = :name AND u.age > :minAge")\r\nList<User> findByNameAndMinAge(String name, int minAge);\r\n\r\n// Native SQL with named parameters\r\n@Query(value = "SELECT * FROM users WHERE name = :name AND age > :minAge", \r\n       nativeQuery = true)\r\nList<User> findByNameAndMinAgeNative(String name, int minAge);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"positional-parameters",children:"Positional Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// HQL with positional parameters\r\n@Query("SELECT u FROM User u WHERE u.name = ?1 AND u.age > ?2")\r\nList<User> findByNameAndMinAge(String name, int minAge);\r\n\r\n// Native SQL with positional parameters\r\n@Query(value = "SELECT * FROM users WHERE name = ?1 AND age > ?2", \r\n       nativeQuery = true)\r\nList<User> findByNameAndMinAgeNative(String name, int minAge);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"collection-parameters",children:"Collection Parameters"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Collections in queries\r\n@Query("SELECT u FROM User u WHERE u.status IN :statuses")\r\nList<User> findByStatuses(List<String> statuses);\r\n\r\n@Query("SELECT u FROM User u WHERE u.id IN :ids")\r\nList<User> findByIds(Set<Long> ids);\r\n\r\n// Native SQL with collections\r\n@Query(value = "SELECT * FROM users WHERE status IN (:statuses)", nativeQuery = true)\r\nList<User> findByStatusesNative(List<String> statuses);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"advanced-query-patterns",children:"Advanced Query Patterns"}),"\n",(0,t.jsx)(n.h3,{id:"pagination-and-limiting",children:"Pagination and Limiting"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Top/First keywords for limiting results\r\nList<User> findTop10ByActiveOrderByCreatedDateDesc(boolean active);\r\nList<User> findFirst5ByNameContainingOrderByName(String namePattern);\r\nOptional<User> findFirstByActiveOrderByCreatedDateDesc(boolean active);\r\n\r\n// Custom limit with @Query\r\n@Query(value = "SELECT * FROM users WHERE active = ?1 ORDER BY created_date DESC LIMIT ?2", \r\n       nativeQuery = true)\r\nList<User> findActiveUsersWithLimit(boolean active, int limit);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"distinct-results",children:"Distinct Results"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Distinct keyword\r\nList<String> findDistinctNameByActive(boolean active);\r\nList<User> findDistinctByDepartmentName(String departmentName);\r\n\r\n// Custom distinct with @Query\r\n@Query("SELECT DISTINCT u.department FROM User u WHERE u.active = true")\r\nList<String> findDistinctActiveDepartments();\n'})}),"\n",(0,t.jsx)(n.h3,{id:"case-insensitive-queries",children:"Case Insensitive Queries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// IgnoreCase keyword\r\nList<User> findByNameIgnoreCase(String name);\r\nList<User> findByEmailContainingIgnoreCase(String emailPattern);\r\n\r\n// Custom case insensitive with @Query\r\n@Query("SELECT u FROM User u WHERE UPPER(u.name) = UPPER(:name)")\r\nList<User> findByNameCaseInsensitive(String name);\n'})}),"\n",(0,t.jsx)(n.h3,{id:"date-and-time-queries",children:"Date and Time Queries"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Date comparisons\r\nList<User> findByCreatedDateAfter(Date date);\r\nList<User> findByCreatedDateBefore(Date date);\r\nList<User> findByCreatedDateBetween(Date start, Date end);\r\n\r\n// Time-based queries with @Query\r\n@Query("SELECT u FROM User u WHERE u.createdDate >= :startOfDay AND u.createdDate < :endOfDay")\r\nList<User> findUsersCreatedOnDate(Date startOfDay, Date endOfDay);\r\n\r\n@Query("SELECT u FROM User u WHERE YEAR(u.createdDate) = :year")\r\nList<User> findUsersCreatedInYear(int year);\r\n\r\n// Native SQL for database-specific date functions\r\n@Query(value = "SELECT * FROM users WHERE DATE(created_date) = CURDATE()", nativeQuery = true)\r\nList<User> findUsersCreatedToday();\n'})}),"\n",(0,t.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,t.jsx)(n.h3,{id:"index-usage",children:"Index Usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Queries that can use indexes effectively\r\nOptional<User> findByEmail(String email);        // If email is indexed\r\nList<User> findByActive(boolean active);         // If active is indexed\r\nList<User> findByCreatedDateAfter(Date date);    // If created_date is indexed\r\n\r\n// Compound index usage\r\nList<User> findByActiveAndDepartment(boolean active, String department);\r\n// Effective if there's an index on (active, department)\n"})}),"\n",(0,t.jsx)(n.h3,{id:"query-optimization",children:"Query Optimization"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good: Specific queries\r\nList<User> findByActive(boolean active);\r\nlong countByActive(boolean active);\r\nboolean existsByEmail(String email);\r\n\r\n// Avoid: Inefficient patterns\r\n// Don't do this - loads all users into memory then filters\r\n// List<User> allUsers = userRepository.findAll();\r\n// List<User> activeUsers = allUsers.stream()\r\n//     .filter(User::isActive)\r\n//     .collect(toList());\r\n\r\n// Do this instead - database-level filtering\r\nList<User> activeUsers = userRepository.findByActive(true);\n"})}),"\n",(0,t.jsx)(n.h3,{id:"batch-operations",children:"Batch Operations"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Efficient batch operations\r\nList<User> saveAll(Iterable<User> users);\r\nvoid deleteAllById(Iterable<Long> ids);\r\n\r\n// Bulk operations with @Query\r\n@Query("UPDATE User u SET u.active = false WHERE u.id IN :ids")\r\n@Modifying\r\nint deactivateUsers(List<Long> ids);\r\n\r\n@Query("DELETE FROM User u WHERE u.id IN :ids")\r\n@Modifying\r\nint deleteUsersByIds(List<Long> ids);\n'})}),"\n",(0,t.jsx)(n.h2,{id:"error-handling-and-debugging",children:"Error Handling and Debugging"}),"\n",(0,t.jsx)(n.h3,{id:"common-errors",children:"Common Errors"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Error: Method name doesn't follow conventions\r\n// List<User> getUsersByEmail(String email);  // Wrong prefix\r\nList<User> findByEmail(String email);          // Correct\r\n\r\n// Error: Property doesn't exist\r\n// List<User> findByNonExistentProperty(String value);  // Will fail\r\nList<User> findByName(String name);                     // Correct\r\n\r\n// Error: Parameter count mismatch\r\n// List<User> findByEmailAndActive(String email);       // Missing parameter\r\nList<User> findByEmailAndActive(String email, boolean active);  // Correct\n"})}),"\n",(0,t.jsx)(n.h3,{id:"debug-query-generation",children:"Debug Query Generation"}),"\n",(0,t.jsx)(n.p,{children:"Enable SQL logging to see generated queries:"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-properties",children:"# Enable SQL logging\r\njazzy.jpa.show-sql=true\r\njazzy.jpa.hibernate.format_sql=true\r\n\r\n# Enable parameter logging\r\nlogging.level.org.hibernate.type.descriptor.sql.BasicBinder=TRACE\n"})}),"\n",(0,t.jsx)(n.h3,{id:"testing-query-methods",children:"Testing Query Methods"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'@Component\r\npublic class UserRepositoryTest {\r\n    private final UserRepository userRepository;\r\n    \r\n    public UserRepositoryTest(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n    \r\n    public void testQueryMethods() {\r\n        // Test data setup\r\n        User user1 = new User("John Doe", "john@example.com", "password");\r\n        User user2 = new User("Jane Smith", "jane@example.com", "password");\r\n        user2.setActive(false);\r\n        \r\n        userRepository.saveAll(List.of(user1, user2));\r\n        \r\n        // Test method name queries\r\n        Optional<User> foundByEmail = userRepository.findByEmail("john@example.com");\r\n        assert foundByEmail.isPresent();\r\n        assert foundByEmail.get().getName().equals("John Doe");\r\n        \r\n        List<User> activeUsers = userRepository.findByActive(true);\r\n        assert activeUsers.size() == 1;\r\n        assert activeUsers.get(0).getName().equals("John Doe");\r\n        \r\n        long activeCount = userRepository.countByActive(true);\r\n        assert activeCount == 1;\r\n        \r\n        boolean exists = userRepository.existsByEmail("john@example.com");\r\n        assert exists;\r\n        \r\n        // Test custom queries\r\n        Optional<User> activeUser = userRepository.findActiveUserByEmail("john@example.com");\r\n        assert activeUser.isPresent();\r\n        \r\n        // Cleanup\r\n        userRepository.deleteAll();\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(n.h3,{id:"1-method-naming",children:"1. Method Naming"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good: Clear, descriptive names\r\nOptional<User> findByEmail(String email);\r\nList<User> findActiveUsersByDepartment(String department);\r\nlong countUsersByRegistrationDateAfter(Date date);\r\n\r\n// Avoid: Unclear or overly complex names\r\nOptional<User> findByEmailAndActiveAndDepartmentAndRole(...);  // Too complex\r\nList<User> getStuff(String thing);                            // Unclear\n"})}),"\n",(0,t.jsx)(n.h3,{id:"2-return-types",children:"2. Return Types"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good: Appropriate return types\r\nOptional<User> findByEmail(String email);        // Single result that might not exist\r\nList<User> findByActive(boolean active);         // Multiple results\r\nboolean existsByEmail(String email);             // Existence check\r\nlong countByActive(boolean active);              // Count operation\r\n\r\n// Avoid: Inappropriate return types\r\nUser findByEmail(String email);                  // Might return null\r\nOptional<List<User>> findByActive(boolean active); // Unnecessary Optional wrapping\n"})}),"\n",(0,t.jsx)(n.h3,{id:"3-query-complexity",children:"3. Query Complexity"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:'// Good: Simple, focused queries\r\n@Query("SELECT u FROM User u WHERE u.email = :email AND u.active = true")\r\nOptional<User> findActiveUserByEmail(String email);\r\n\r\n// Consider: Breaking down complex queries\r\n@Query("SELECT u FROM User u WHERE u.department.name = :dept")\r\nList<User> findUsersByDepartment(String dept);\r\n\r\n// Avoid: Overly complex queries\r\n@Query("""\r\n    SELECT u FROM User u \r\n    JOIN u.department d \r\n    JOIN u.roles r \r\n    WHERE u.active = true \r\n    AND d.name = :dept \r\n    AND r.name IN :roles \r\n    AND u.createdDate > :date\r\n    """)\r\nList<User> findComplexUserCriteria(...);  // Consider breaking this down\n'})}),"\n",(0,t.jsx)(n.h3,{id:"4-performance",children:"4. Performance"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"// Good: Use specific queries\r\nboolean existsByEmail(String email);      // Better than findByEmail().isPresent()\r\nlong countByActive(boolean active);       // Better than findByActive().size()\r\n\r\n// Good: Use appropriate indexes\r\nList<User> findByEmail(String email);     // Ensure email is indexed\r\nList<User> findByActiveAndDepartment(boolean active, String dept);  // Compound index\r\n\r\n// Avoid: Inefficient patterns\r\nList<User> findAll();  // Then filter in memory - use specific queries instead\n"})}),"\n",(0,t.jsx)(n.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/jazzy-framework/docs/repositories",children:"Repository Pattern"})," - Repository interface design"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"database-examples.md",children:"Database Examples"})," - Complete working examples"]}),"\n",(0,t.jsxs)(n.li,{children:[(0,t.jsx)(n.a,{href:"/jazzy-framework/docs/database-integration",children:"Database Integration"})," - Overall database setup guide"]}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>s,x:()=>l});var i=r(6540);const t={},a=i.createContext(t);function s(e){const n=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:s(e.components),i.createElement(a.Provider,{value:n},e.children)}}}]);