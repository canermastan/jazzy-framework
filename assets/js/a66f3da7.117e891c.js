"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[355],{6479:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"dependency-injection","title":"Dependency Injection","description":"Jazzy Framework 0.2 introduces a powerful Spring-like dependency injection (DI) system that automatically manages object creation, dependency resolution, and lifecycle management. The DI system provides zero-configuration automatic component discovery and enterprise-level features.","source":"@site/docs/dependency-injection.md","sourceDirName":".","slug":"/dependency-injection","permalink":"/jazzy-framework/docs/dependency-injection","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/dependency-injection.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Validation","permalink":"/jazzy-framework/docs/validation"},"next":{"title":"Dependency Injection Examples","permalink":"/jazzy-framework/docs/di-examples"}}');var s=i(4848),t=i(8453);const o={},c="Dependency Injection",a={},l=[{value:"Overview",id:"overview",level:2},{value:"Quick Start",id:"quick-start",level:2},{value:"1. Create a Component",id:"1-create-a-component",level:3},{value:"2. Create a Repository",id:"2-create-a-repository",level:3},{value:"3. Create a Controller",id:"3-create-a-controller",level:3},{value:"4. Use in Your Application",id:"4-use-in-your-application",level:3},{value:"Annotations",id:"annotations",level:2},{value:"@Component",id:"component",level:3},{value:"@Named",id:"named",level:3},{value:"@Primary",id:"primary",level:3},{value:"@PostConstruct",id:"postconstruct",level:3},{value:"@PreDestroy",id:"predestroy",level:3},{value:"@Singleton (Default)",id:"singleton-default",level:3},{value:"@Prototype",id:"prototype",level:3},{value:"Advanced Usage",id:"advanced-usage",level:2},{value:"Multiple Implementations with Named Injection",id:"multiple-implementations-with-named-injection",level:3},{value:"Lifecycle Management Example",id:"lifecycle-management-example",level:3},{value:"Prototype Scope Example",id:"prototype-scope-example",level:3},{value:"How It Works",id:"how-it-works",level:2},{value:"1. Automatic Component Discovery",id:"1-automatic-component-discovery",level:3},{value:"2. Dependency Resolution",id:"2-dependency-resolution",level:3},{value:"3. Lifecycle Management",id:"3-lifecycle-management",level:3},{value:"Integration with Framework",id:"integration-with-framework",level:2},{value:"Router Integration",id:"router-integration",level:3},{value:"Server Integration",id:"server-integration",level:3},{value:"Migration from 0.1 to 0.2",id:"migration-from-01-to-02",level:2},{value:"No Breaking Changes",id:"no-breaking-changes",level:3},{value:"Adding DI to Existing Controllers",id:"adding-di-to-existing-controllers",level:3},{value:"Gradual Migration",id:"gradual-migration",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Constructor Injection",id:"1-constructor-injection",level:3},{value:"2. Use Interfaces",id:"2-use-interfaces",level:3},{value:"3. Named Injection for Multiple Implementations",id:"3-named-injection-for-multiple-implementations",level:3},{value:"4. Lifecycle Methods",id:"4-lifecycle-methods",level:3},{value:"5. Prototype for Stateful Objects",id:"5-prototype-for-stateful-objects",level:3},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Multiple Beans Error",id:"multiple-beans-error",level:3},{value:"No Bean Found Error",id:"no-bean-found-error",level:3},{value:"Circular Dependencies",id:"circular-dependencies",level:3},{value:"Performance Considerations",id:"performance-considerations",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"dependency-injection",children:"Dependency Injection"})}),"\n",(0,s.jsx)(n.p,{children:"Jazzy Framework 0.2 introduces a powerful Spring-like dependency injection (DI) system that automatically manages object creation, dependency resolution, and lifecycle management. The DI system provides zero-configuration automatic component discovery and enterprise-level features."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"The DI system is built on top of PicoContainer but provides a much more developer-friendly API with annotations and automatic configuration. Key features include:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Automatic Component Discovery"}),": No manual configuration required"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constructor Injection"}),": Dependencies injected via constructor parameters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Named Injection"}),": Multiple implementations of same interface"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Primary Bean Selection"}),": Conflict resolution with ",(0,s.jsx)(n.code,{children:"@Primary"})]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Lifecycle Management"}),": ",(0,s.jsx)(n.code,{children:"@PostConstruct"})," and ",(0,s.jsx)(n.code,{children:"@PreDestroy"})," callbacks"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Scope Management"}),": Singleton and Prototype scopes"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Zero Configuration"}),": Works out of the box"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"quick-start",children:"Quick Start"}),"\n",(0,s.jsx)(n.h3,{id:"1-create-a-component",children:"1. Create a Component"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class UserService {\n    private final UserRepository repository;\n    \n    // Constructor injection - DI container automatically injects UserRepository\n    public UserService(UserRepository repository) {\n        this.repository = repository;\n    }\n    \n    public List<User> getAllUsers() {\n        return repository.findAll();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-create-a-repository",children:"2. Create a Repository"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class UserRepository {\n    private final List<User> users = new ArrayList<>();\n    \n    @PostConstruct\n    public void init() {\n        // Called after bean creation\n        System.out.println("UserRepository initialized");\n    }\n    \n    public List<User> findAll() {\n        return new ArrayList<>(users);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"3-create-a-controller",children:"3. Create a Controller"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class UserController {\n    private final UserService userService;\n    \n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n    \n    public Response getUsers(Request request) {\n        return Response.json(userService.getAllUsers());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"4-use-in-your-application",children:"4. Use in Your Application"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'public class App {\n    public static void main(String[] args) {\n        Config config = new Config();\n        Router router = new Router();\n        \n        // Define routes - controllers will be created with DI\n        router.GET("/users", "getUsers", UserController.class);\n        \n        // DI is automatically enabled and configured\n        Server server = new Server(router, config);\n        server.start(8080);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"That's it! The DI container automatically:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Discovers all ",(0,s.jsx)(n.code,{children:"@Component"})," classes"]}),"\n",(0,s.jsx)(n.li,{children:"Resolves dependencies between them"}),"\n",(0,s.jsx)(n.li,{children:"Creates instances with proper injection"}),"\n",(0,s.jsx)(n.li,{children:"Manages lifecycle callbacks"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"annotations",children:"Annotations"}),"\n",(0,s.jsx)(n.h3,{id:"component",children:"@Component"}),"\n",(0,s.jsx)(n.p,{children:"Marks a class as a component that should be managed by the DI container."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class EmailService {\n    // Component logic\n}\n\n// With custom name\n@Component("customEmailService")\npublic class EmailService {\n    // Component logic\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"named",children:"@Named"}),"\n",(0,s.jsx)(n.p,{children:"Provides a specific name for a component, useful when you have multiple implementations:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\n@Named("emailService")\npublic class EmailNotificationService implements NotificationService {\n    // Email implementation\n}\n\n@Component  \n@Named("smsService")\npublic class SmsNotificationService implements NotificationService {\n    // SMS implementation\n}\n\n// Inject specific implementation\n@Component\npublic class UserService {\n    public UserService(@Named("emailService") NotificationService notificationService) {\n        // Will inject EmailNotificationService\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"primary",children:"@Primary"}),"\n",(0,s.jsx)(n.p,{children:"Marks a bean as primary when multiple candidates exist:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\n@Primary\npublic class DatabaseUserRepository implements UserRepository {\n    // Primary implementation\n}\n\n@Component\npublic class InMemoryUserRepository implements UserRepository {\n    // Alternative implementation  \n}\n\n// UserService will get DatabaseUserRepository injected automatically\n@Component\npublic class UserService {\n    public UserService(UserRepository repository) {\n        // DatabaseUserRepository will be injected due to @Primary\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"postconstruct",children:"@PostConstruct"}),"\n",(0,s.jsx)(n.p,{children:"Method called after the bean is created and dependencies are injected:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class DatabaseService {\n    private Connection connection;\n    \n    @PostConstruct\n    public void initialize() {\n        // Initialization code here\n        connection = DriverManager.getConnection("...");\n        // Load default data, connect to external services, etc.\n    }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Method must have no parameters"}),"\n",(0,s.jsx)(n.li,{children:"Method must return void"}),"\n",(0,s.jsxs)(n.li,{children:["Can have multiple ",(0,s.jsx)(n.code,{children:"@PostConstruct"})," methods"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"predestroy",children:"@PreDestroy"}),"\n",(0,s.jsx)(n.p,{children:"Method called before the bean is destroyed (when server shuts down):"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class DatabaseService {\n    private Connection connection;\n    \n    @PreDestroy\n    public void cleanup() {\n        // Cleanup code here\n        if (connection != null) {\n            connection.close();\n        }\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Requirements:"})}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Method must have no parameters"}),"\n",(0,s.jsx)(n.li,{children:"Method must return void"}),"\n",(0,s.jsxs)(n.li,{children:["Can have multiple ",(0,s.jsx)(n.code,{children:"@PreDestroy"})," methods"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"singleton-default",children:"@Singleton (Default)"}),"\n",(0,s.jsx)(n.p,{children:"Ensures only one instance of the component exists:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\n@Singleton  // This is the default behavior\npublic class ConfigurationService {\n    // Only one instance will be created\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"prototype",children:"@Prototype"}),"\n",(0,s.jsx)(n.p,{children:"Creates a new instance every time the component is requested:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\n@Prototype\npublic class RequestProcessor {\n    // New instance created for each injection\n}\n\n@Component\npublic class RequestHandler {\n    public RequestHandler(\n        RequestProcessor processor1,  // New instance\n        RequestProcessor processor2   // Different new instance\n    ) {\n        // processor1 != processor2\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"advanced-usage",children:"Advanced Usage"}),"\n",(0,s.jsx)(n.h3,{id:"multiple-implementations-with-named-injection",children:"Multiple Implementations with Named Injection"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Define interface\npublic interface NotificationService {\n    void send(String recipient, String message);\n}\n\n// Multiple implementations\n@Component\n@Named("emailService")\npublic class EmailNotificationService implements NotificationService {\n    @Override\n    public void send(String recipient, String message) {\n        System.out.println("Sending email to: " + recipient);\n    }\n}\n\n@Component\n@Named("smsService") \npublic class SmsNotificationService implements NotificationService {\n    @Override\n    public void send(String recipient, String message) {\n        System.out.println("Sending SMS to: " + recipient);\n    }\n}\n\n@Component\n@Primary\npublic class PushNotificationService implements NotificationService {\n    @Override\n    public void send(String recipient, String message) {\n        System.out.println("Sending push notification to: " + recipient);\n    }\n}\n\n// Usage in components\n@Component\npublic class NotificationManager {\n    private final NotificationService defaultService;  // Gets @Primary (Push)\n    private final NotificationService emailService;    // Gets @Named("emailService")\n    private final NotificationService smsService;      // Gets @Named("smsService")\n    \n    public NotificationManager(\n        NotificationService defaultService,              // @Primary injection\n        @Named("emailService") NotificationService emailService,\n        @Named("smsService") NotificationService smsService\n    ) {\n        this.defaultService = defaultService;\n        this.emailService = emailService;\n        this.smsService = smsService;\n    }\n    \n    public void sendAll(String recipient, String message) {\n        defaultService.send(recipient, message);\n        emailService.send(recipient, message);\n        smsService.send(recipient, message);\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"lifecycle-management-example",children:"Lifecycle Management Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class DatabaseService {\n    private Connection connection;\n    private boolean initialized = false;\n    \n    @PostConstruct\n    public void initialize() {\n        System.out.println("Initializing database connection...");\n        // connection = DriverManager.getConnection(...);\n        initialized = true;\n        System.out.println("Database service initialized");\n    }\n    \n    @PostConstruct\n    public void loadDefaultData() {\n        System.out.println("Loading default data...");\n        // Load initial data\n    }\n    \n    @PreDestroy\n    public void cleanup() {\n        System.out.println("Cleaning up database service...");\n        if (connection != null) {\n            // connection.close();\n        }\n        System.out.println("Database service cleaned up");\n    }\n    \n    public boolean isReady() {\n        return initialized;\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"prototype-scope-example",children:"Prototype Scope Example"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\n@Prototype\npublic class RequestProcessor {\n    private final String instanceId;\n    private int requestCount = 0;\n    \n    public RequestProcessor() {\n        this.instanceId = UUID.randomUUID().toString();\n        System.out.println("Created RequestProcessor: " + instanceId);\n    }\n    \n    @PostConstruct\n    public void init() {\n        System.out.println("Initializing RequestProcessor: " + instanceId);\n    }\n    \n    public void processRequest(String data) {\n        requestCount++;\n        System.out.println("Processing request #" + requestCount + " in " + instanceId);\n    }\n    \n    public String getInstanceId() {\n        return instanceId;\n    }\n}\n\n@Component\npublic class RequestHandler {\n    private final RequestProcessor processor1;\n    private final RequestProcessor processor2;\n    \n    public RequestHandler(\n        RequestProcessor processor1,  // New instance\n        RequestProcessor processor2   // Different new instance  \n    ) {\n        this.processor1 = processor1;\n        this.processor2 = processor2;\n        \n        // These will be different instances\n        System.out.println("Processor 1 ID: " + processor1.getInstanceId());\n        System.out.println("Processor 2 ID: " + processor2.getInstanceId());\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"how-it-works",children:"How It Works"}),"\n",(0,s.jsx)(n.h3,{id:"1-automatic-component-discovery",children:"1. Automatic Component Discovery"}),"\n",(0,s.jsx)(n.p,{children:"The DI container automatically discovers components by:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Main Class Detection"}),": Analyzes the stack trace to find the ",(0,s.jsx)(n.code,{children:"main"})," method"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Package Scanning"}),": Scans the main class package and all sub-packages"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Class Loading"}),": Loads all ",(0,s.jsx)(n.code,{children:".class"})," files and checks for ",(0,s.jsx)(n.code,{children:"@Component"})," annotation"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Bean Registration"}),": Creates ",(0,s.jsx)(n.code,{children:"BeanDefinition"})," objects for each component"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-dependency-resolution",children:"2. Dependency Resolution"}),"\n",(0,s.jsx)(n.p,{children:"When creating instances:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Constructor Analysis"}),": Examines constructor parameters"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dependency Lookup"}),": Finds beans for each parameter type"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Named Resolution"}),": Uses ",(0,s.jsx)(n.code,{children:"@Named"})," annotation if present"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Primary Selection"}),": Chooses ",(0,s.jsx)(n.code,{children:"@Primary"})," bean if multiple candidates exist"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Recursive Creation"}),": Creates dependencies first, then the requesting bean"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-lifecycle-management",children:"3. Lifecycle Management"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Creation Order"}),": Dependencies created before dependent beans"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PostConstruct"}),": Called after all dependencies are injected"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Singleton Caching"}),": Singleton instances stored for reuse"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"PreDestroy"}),": Called when server shuts down"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"integration-with-framework",children:"Integration with Framework"}),"\n",(0,s.jsx)(n.p,{children:"The DI system is seamlessly integrated with the Jazzy Framework:"}),"\n",(0,s.jsx)(n.h3,{id:"router-integration",children:"Router Integration"}),"\n",(0,s.jsx)(n.p,{children:"Controllers are automatically created with dependency injection:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'// Define routes\nrouter.GET("/users", "getUsers", UserController.class);\nrouter.POST("/users", "createUser", UserController.class);\n\n// When a request comes in:\n// 1. Router finds the route\n// 2. RequestHandler gets the controller class\n// 3. DI container creates controller instance with dependencies\n// 4. Method is invoked with proper Request object\n'})}),"\n",(0,s.jsx)(n.h3,{id:"server-integration",children:"Server Integration"}),"\n",(0,s.jsx)(n.p,{children:"The server automatically initializes DI:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class Server {\n    public Server(Router router, Config config) {\n        // DI is automatically initialized\n        this.diContainer = new DIContainer();\n        this.router.setDIContainer(diContainer);\n        diContainer.initialize();  // Discovers and registers all components\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"migration-from-01-to-02",children:"Migration from 0.1 to 0.2"}),"\n",(0,s.jsx)(n.p,{children:"If you're upgrading from Jazzy Framework 0.1:"}),"\n",(0,s.jsx)(n.h3,{id:"no-breaking-changes",children:"No Breaking Changes"}),"\n",(0,s.jsx)(n.p,{children:"All existing 0.1 code continues to work without modification. DI is additive."}),"\n",(0,s.jsx)(n.h3,{id:"adding-di-to-existing-controllers",children:"Adding DI to Existing Controllers"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Before (0.1):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public class UserController {\n    private UserService userService = new UserService();\n    \n    public Response getUsers(Request request) {\n        return Response.json(userService.getAllUsers());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"After (0.2):"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class UserController {\n    private final UserService userService;\n    \n    public UserController(UserService userService) {\n        this.userService = userService;\n    }\n    \n    public Response getUsers(Request request) {\n        return Response.json(userService.getAllUsers());\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"gradual-migration",children:"Gradual Migration"}),"\n",(0,s.jsx)(n.p,{children:"You can migrate gradually:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Add ",(0,s.jsx)(n.code,{children:"@Component"})," to classes you want managed by DI"]}),"\n",(0,s.jsx)(n.li,{children:"Keep non-annotated classes as manual instantiation"}),"\n",(0,s.jsx)(n.li,{children:"Mix DI and manual creation in the same application"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsx)(n.h3,{id:"1-constructor-injection",children:"1. Constructor Injection"}),"\n",(0,s.jsx)(n.p,{children:"Always use constructor injection for required dependencies:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class UserService {\n    private final UserRepository repository;\n    private final EmailService emailService;\n    \n    // Good: Constructor injection\n    public UserService(UserRepository repository, EmailService emailService) {\n        this.repository = repository;\n        this.emailService = emailService;\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"2-use-interfaces",children:"2. Use Interfaces"}),"\n",(0,s.jsx)(n.p,{children:"Design with interfaces for better testability:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"public interface UserRepository {\n    List<User> findAll();\n    User findById(String id);\n}\n\n@Component\n@Primary\npublic class DatabaseUserRepository implements UserRepository {\n    // Production implementation\n}\n\n@Component  \npublic class InMemoryUserRepository implements UserRepository {\n    // Test implementation\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"3-named-injection-for-multiple-implementations",children:"3. Named Injection for Multiple Implementations"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"@Named"})," when you have multiple implementations:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\npublic class NotificationService {\n    public NotificationService(\n        @Named("emailService") EmailService emailService,\n        @Named("smsService") SmsService smsService\n    ) {\n        // Clear which implementation you\'re getting\n    }\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"4-lifecycle-methods",children:"4. Lifecycle Methods"}),"\n",(0,s.jsx)(n.p,{children:"Use lifecycle methods for proper initialization:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\npublic class CacheService {\n    private Cache cache;\n    \n    @PostConstruct\n    public void initialize() {\n        cache = new Cache();\n        cache.preload();\n    }\n    \n    @PreDestroy\n    public void cleanup() {\n        cache.clear();\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h3,{id:"5-prototype-for-stateful-objects",children:"5. Prototype for Stateful Objects"}),"\n",(0,s.jsxs)(n.p,{children:["Use ",(0,s.jsx)(n.code,{children:"@Prototype"})," for objects that maintain state:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"@Component\n@Prototype\npublic class ShoppingCart {\n    private List<Item> items = new ArrayList<>();\n    \n    // Each user gets their own cart instance\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.h3,{id:"multiple-beans-error",children:"Multiple Beans Error"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error:"}),' "Multiple beans found for type X but no @Primary annotation"']}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Add ",(0,s.jsx)(n.code,{children:"@Primary"})," to one implementation or use ",(0,s.jsx)(n.code,{children:"@Named"})," injection:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'@Component\n@Primary  // Add this\npublic class PreferredImplementation implements SomeInterface {\n}\n\n// OR use @Named injection\npublic SomeService(@Named("specific") SomeInterface implementation) {\n}\n'})}),"\n",(0,s.jsx)(n.h3,{id:"no-bean-found-error",children:"No Bean Found Error"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error:"}),' "No bean found with name: X"']}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.strong,{children:"Solution:"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Ensure the class has ",(0,s.jsx)(n.code,{children:"@Component"})," annotation"]}),"\n",(0,s.jsx)(n.li,{children:"Check the component name matches"}),"\n",(0,s.jsx)(n.li,{children:"Verify the class is in a scanned package"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"circular-dependencies",children:"Circular Dependencies"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Error:"})," PicoContainer circular dependency exception"]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Solution:"})," Redesign to avoid circular dependencies:"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"// Bad: A depends on B, B depends on A\n@Component\npublic class ServiceA {\n    public ServiceA(ServiceB serviceB) { }\n}\n\n@Component \npublic class ServiceB {\n    public ServiceB(ServiceA serviceA) { } // Circular!\n}\n\n// Good: Use a third service or event-driven approach\n@Component\npublic class ServiceCoordinator {\n    public ServiceCoordinator(ServiceA serviceA, ServiceB serviceB) {\n        // Coordinate between A and B\n    }\n}\n"})}),"\n",(0,s.jsx)(n.h2,{id:"performance-considerations",children:"Performance Considerations"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Startup Time"}),": Component scanning happens once at startup"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Memory Usage"}),": Singleton beans cached for lifetime of application"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Thread Safety"}),": DI container is thread-safe, but your beans should be too"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Reflection Overhead"}),": Minimal - only during bean creation, not on each request"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"The DI system is designed for production use and adds minimal overhead to your application."})]})}function p(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>c});var r=i(6540);const s={},t=r.createContext(s);function o(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);