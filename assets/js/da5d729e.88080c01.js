"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[200],{8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}},9686:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"di-examples","title":"Dependency Injection Examples","description":"This page provides complete, runnable examples demonstrating the Jazzy Framework 0.2 dependency injection system. Each example builds upon the previous ones, showing progressively more advanced features.","source":"@site/docs/di-examples.md","sourceDirName":".","slug":"/di-examples","permalink":"/jazzy-framework/docs/di-examples","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/di-examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Dependency Injection","permalink":"/jazzy-framework/docs/dependency-injection"},"next":{"title":"Database Integration","permalink":"/jazzy-framework/docs/database-integration"}}');var r=t(4848),s=t(8453);const a={},o="Dependency Injection Examples",l={},c=[{value:"Basic Example: User Management System",id:"basic-example-user-management-system",level:2},{value:"Entity",id:"entity",level:3},{value:"Repository Component",id:"repository-component",level:3},{value:"Service Component",id:"service-component",level:3},{value:"Controller Component",id:"controller-component",level:3},{value:"Application",id:"application",level:3},{value:"Advanced Example: Multiple Implementations with Named Injection",id:"advanced-example-multiple-implementations-with-named-injection",level:2},{value:"Interface",id:"interface",level:3},{value:"Multiple Implementations",id:"multiple-implementations",level:3},{value:"Manager Component with Named Injection",id:"manager-component-with-named-injection",level:3},{value:"Prototype Scope Example",id:"prototype-scope-example",level:3},{value:"Advanced Controller",id:"advanced-controller",level:3},{value:"Advanced Application",id:"advanced-application",level:3},{value:"Running the Examples",id:"running-the-examples",level:2},{value:"Basic Example",id:"basic-example",level:3},{value:"Advanced Example",id:"advanced-example",level:3},{value:"Key Takeaways",id:"key-takeaways",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"dependency-injection-examples",children:"Dependency Injection Examples"})}),"\n",(0,r.jsx)(n.p,{children:"This page provides complete, runnable examples demonstrating the Jazzy Framework 0.2 dependency injection system. Each example builds upon the previous ones, showing progressively more advanced features."}),"\n",(0,r.jsx)(n.h2,{id:"basic-example-user-management-system",children:"Basic Example: User Management System"}),"\n",(0,r.jsx)(n.p,{children:"This example demonstrates basic DI with components, constructor injection, and lifecycle management."}),"\n",(0,r.jsx)(n.h3,{id:"entity",children:"Entity"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package examples.di.entity;\n\nimport jazzyframework.http.JSON;\n\npublic class User {\n    private String id;\n    private String name;\n    private String email;\n    private String password;\n\n    public User() {}\n\n    public User(String id, String name, String email, String password) {\n        this.id = id;\n        this.name = name;\n        this.email = email;\n        this.password = password;\n    }\n\n    // Getters and setters\n    public String getId() { return id; }\n    public void setId(String id) { this.id = id; }\n    \n    public String getName() { return name; }\n    public void setName(String name) { this.name = name; }\n    \n    public String getEmail() { return email; }\n    public void setEmail(String email) { this.email = email; }\n    \n    public String getPassword() { return password; }\n    public void setPassword(String password) { this.password = password; }\n\n    @Override\n    public String toString() {\n        return JSON.stringify(this);\n    }\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"repository-component",children:"Repository Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.di.repository;\n\nimport examples.di.entity.User;\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.PostConstruct;\n\nimport java.util.ArrayList;\nimport java.util.List;\nimport java.util.Optional;\n\n@Component\npublic class UserRepository {\n    private final List<User> users = new ArrayList<>();\n\n    @PostConstruct\n    public void init() {\n        // Initialize with some sample data\n        users.add(new User("1", "John Doe", "john@example.com", "password123"));\n        users.add(new User("2", "Jane Smith", "jane@example.com", "password456"));\n        System.out.println("UserRepository initialized with " + users.size() + " users");\n    }\n\n    public List<User> findAll() {\n        return new ArrayList<>(users);\n    }\n\n    public Optional<User> findById(String id) {\n        return users.stream().filter(u -> u.getId().equals(id)).findFirst();\n    }\n\n    public void save(User user) {\n        users.removeIf(u -> u.getId().equals(user.getId()));\n        users.add(user);\n    }\n\n    public boolean deleteById(String id) {\n        return users.removeIf(u -> u.getId().equals(id));\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"service-component",children:"Service Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.di.service;\n\nimport examples.di.entity.User;\nimport examples.di.repository.UserRepository;\nimport jazzyframework.di.annotations.Component;\n\nimport java.util.List;\nimport java.util.Optional;\nimport java.util.UUID;\n\n@Component\npublic class UserService {\n    private final UserRepository userRepository;\n\n    // Constructor injection - DI container will automatically inject UserRepository\n    public UserService(UserRepository userRepository) {\n        this.userRepository = userRepository;\n        System.out.println("UserService created with injected UserRepository");\n    }\n\n    public List<User> getAllUsers() {\n        return userRepository.findAll();\n    }\n\n    public Optional<User> getUserById(String id) {\n        return userRepository.findById(id);\n    }\n\n    public User createUser(User user) {\n        // Generate a new ID if not provided\n        if (user.getId() == null || user.getId().isEmpty()) {\n            user.setId(UUID.randomUUID().toString());\n        }\n        userRepository.save(user);\n        return user;\n    }\n\n    public Optional<User> updateUser(String id, User updatedUser) {\n        Optional<User> existingUser = userRepository.findById(id);\n        if (existingUser.isPresent()) {\n            updatedUser.setId(id);\n            userRepository.save(updatedUser);\n            return Optional.of(updatedUser);\n        }\n        return Optional.empty();\n    }\n\n    public boolean deleteUser(String id) {\n        return userRepository.deleteById(id);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"controller-component",children:"Controller Component"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.di.controller;\n\nimport examples.di.entity.User;\nimport examples.di.service.UserService;\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.http.Request;\nimport jazzyframework.http.Response;\n\nimport java.util.Optional;\n\n@Component\npublic class UserController {\n    private final UserService userService;\n\n    // Constructor injection - DI container will automatically inject UserService\n    public UserController(UserService userService) {\n        this.userService = userService;\n        System.out.println("UserController created with injected UserService");\n    }\n\n    public Response getUsers(Request request) {\n        return Response.json(userService.getAllUsers());\n    }\n\n    public Response getUserById(Request request) {\n        String id = request.getPathParam("id");\n        Optional<User> user = userService.getUserById(id);\n        \n        if (user.isPresent()) {\n            // Hide password in the response\n            User responseUser = user.get();\n            responseUser.setPassword(null);\n            return Response.json(responseUser);\n        } else {\n            return Response.notFound().json("{\\"error\\": \\"User not found\\"}");\n        }\n    }\n\n    public Response createUser(Request request) {\n        try {\n            User user = request.getBody(User.class);\n            User createdUser = userService.createUser(user);\n            // Hide password in the response\n            createdUser.setPassword(null);\n            return Response.created().json(createdUser);\n        } catch (Exception e) {\n            return Response.badRequest().json("{\\"error\\": \\"Invalid user data\\"}");\n        }\n    }\n\n    public Response updateUser(Request request) {\n        String id = request.getPathParam("id");\n        \n        try {\n            User user = request.getBody(User.class);\n            Optional<User> updatedUser = userService.updateUser(id, user);\n            \n            if (updatedUser.isPresent()) {\n                // Hide password in the response\n                updatedUser.get().setPassword(null);\n                return Response.json(updatedUser.get());\n            } else {\n                return Response.notFound().json("{\\"error\\": \\"User not found\\"}");\n            }\n        } catch (Exception e) {\n            return Response.badRequest().json("{\\"error\\": \\"Invalid user data\\"}");\n        }\n    }\n\n    public Response deleteUser(Request request) {\n        String id = request.getPathParam("id");\n        boolean deleted = userService.deleteUser(id);\n        \n        if (deleted) {\n            return Response.noContent();\n        } else {\n            return Response.notFound().json("{\\"error\\": \\"User not found\\"}");\n        }\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"application",children:"Application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.di;\n\nimport examples.di.controller.UserController;\nimport jazzyframework.core.Config;\nimport jazzyframework.core.Server;\nimport jazzyframework.routing.Router;\n\npublic class App {\n    public static void main(String[] args) {\n        // Create simple configuration\n        Config config = new Config();\n        config.setEnableMetrics(true);\n\n        // Create router and define routes\n        Router router = new Router();\n\n        // Define user routes\n        // Controllers will automatically get dependencies injected\n        router.GET("/users", "getUsers", UserController.class);\n        router.GET("/users/{id}", "getUserById", UserController.class);\n        router.POST("/users", "createUser", UserController.class);\n        router.PUT("/users/{id}", "updateUser", UserController.class);\n        router.DELETE("/users/{id}", "deleteUser", UserController.class);\n\n        // Create and start server\n        // DI will automatically discover and register all @Component classes\n        Server server = new Server(router, config);\n\n        System.out.println("\ud83d\ude80 Jazzy Framework DI Example Server starting...");\n        System.out.println("\ud83d\udcca Metrics available at: http://localhost:8088/metrics");\n        System.out.println("\ud83d\udc64 User API available at: http://localhost:8088/users");\n        System.out.println();\n        System.out.println("Example API calls:");\n        System.out.println("  curl http://localhost:8088/users");\n        System.out.println("  curl http://localhost:8088/users/1");\n        System.out.println("  curl -X POST -H \\"Content-Type: application/json\\" \\\\");\n        System.out.println("       -d \'{\\"name\\":\\"Alice\\",\\"email\\":\\"alice@example.com\\",\\"password\\":\\"secret\\"}\' \\\\");\n        System.out.println("       http://localhost:8088/users");\n\n        server.start(8088);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"When you run this application, you'll see DI in action:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"UserRepository initialized with 2 users\nUserService created with injected UserRepository\nUserController created with injected UserService\n\ud83d\ude80 Jazzy Framework DI Example Server starting...\nServer started on port 8088 with dependency injection\n"})}),"\n",(0,r.jsx)(n.h2,{id:"advanced-example-multiple-implementations-with-named-injection",children:"Advanced Example: Multiple Implementations with Named Injection"}),"\n",(0,r.jsxs)(n.p,{children:["This example shows how to handle multiple implementations of the same interface using ",(0,r.jsx)(n.code,{children:"@Named"})," and ",(0,r.jsx)(n.code,{children:"@Primary"})," annotations."]}),"\n",(0,r.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"package examples.advanced.service;\n\npublic interface NotificationService {\n    void send(String recipient, String message);\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"multiple-implementations",children:"Multiple Implementations"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced.service;\n\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.Named;\nimport jazzyframework.di.annotations.PostConstruct;\n\n@Component\n@Named("emailService")\npublic class EmailNotificationService implements NotificationService {\n    \n    @PostConstruct\n    public void init() {\n        System.out.println("EmailNotificationService initialized");\n    }\n\n    @Override\n    public void send(String recipient, String message) {\n        // Simulate email sending\n        System.out.println("\ud83d\udce7 Sending email to: " + recipient);\n        System.out.println("   Message: " + message);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced.service;\n\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.Named;\nimport jazzyframework.di.annotations.PostConstruct;\n\n@Component\n@Named("smsService")\npublic class SmsNotificationService implements NotificationService {\n    \n    @PostConstruct\n    public void init() {\n        System.out.println("SmsNotificationService initialized");\n    }\n\n    @Override\n    public void send(String recipient, String message) {\n        // Simulate SMS sending\n        System.out.println("\ud83d\udcf1 Sending SMS to: " + recipient);\n        System.out.println("   Message: " + message);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced.service;\n\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.Primary;\nimport jazzyframework.di.annotations.PostConstruct;\n\n@Component\n@Primary\npublic class PushNotificationService implements NotificationService {\n    \n    @PostConstruct\n    public void init() {\n        System.out.println("PushNotificationService initialized (PRIMARY)");\n    }\n\n    @Override\n    public void send(String recipient, String message) {\n        // Simulate push notification sending\n        System.out.println("\ud83d\udd14 Sending push notification to: " + recipient);\n        System.out.println("   Message: " + message);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"manager-component-with-named-injection",children:"Manager Component with Named Injection"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced.service;\n\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.Named;\n\n@Component\npublic class NotificationManager {\n    private final NotificationService defaultService;  // Will get @Primary (Push)\n    private final NotificationService emailService;    // Will get @Named("emailService")\n    private final NotificationService smsService;      // Will get @Named("smsService")\n\n    public NotificationManager(\n        NotificationService defaultService,  // @Primary injection\n        @Named("emailService") NotificationService emailService,\n        @Named("smsService") NotificationService smsService\n    ) {\n        this.defaultService = defaultService;\n        this.emailService = emailService;\n        this.smsService = smsService;\n        System.out.println("NotificationManager created with all notification services");\n    }\n\n    public void sendViaDefault(String recipient, String message) {\n        defaultService.send(recipient, message);\n    }\n\n    public void sendViaEmail(String recipient, String message) {\n        emailService.send(recipient, message);\n    }\n\n    public void sendViaSms(String recipient, String message) {\n        smsService.send(recipient, message);\n    }\n\n    public void sendViaAll(String recipient, String message) {\n        System.out.println("\\n\ud83d\ude80 Sending via all notification services:");\n        defaultService.send(recipient, message);\n        emailService.send(recipient, message);\n        smsService.send(recipient, message);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"prototype-scope-example",children:"Prototype Scope Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced.service;\n\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.PostConstruct;\nimport jazzyframework.di.annotations.Prototype;\n\nimport java.util.UUID;\n\n@Component\n@Prototype\npublic class RequestProcessor {\n    private final String instanceId;\n    private int requestCount = 0;\n\n    public RequestProcessor() {\n        this.instanceId = UUID.randomUUID().toString().substring(0, 8);\n        System.out.println("Created RequestProcessor: " + instanceId);\n    }\n\n    @PostConstruct\n    public void init() {\n        System.out.println("Initializing RequestProcessor: " + instanceId);\n    }\n\n    public void processRequest(String data) {\n        requestCount++;\n        System.out.println("Processing request #" + requestCount + " in processor " + instanceId + ": " + data);\n    }\n\n    public String getInstanceId() {\n        return instanceId;\n    }\n\n    public int getRequestCount() {\n        return requestCount;\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"advanced-controller",children:"Advanced Controller"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced.controller;\n\nimport examples.advanced.service.NotificationManager;\nimport examples.advanced.service.RequestProcessor;\nimport jazzyframework.di.annotations.Component;\nimport jazzyframework.di.annotations.Named;\nimport jazzyframework.http.Request;\nimport jazzyframework.http.Response;\n\nimport java.util.HashMap;\nimport java.util.Map;\n\n@Component\npublic class AdvancedController {\n    private final NotificationManager notificationManager;\n    private final RequestProcessor processor1;\n    private final RequestProcessor processor2;\n\n    // Constructor injection with @Named parameters\n    public AdvancedController(\n        NotificationManager notificationManager,\n        RequestProcessor processor1,         // First @Prototype instance\n        RequestProcessor processor2,         // Second @Prototype instance (different!)\n        @Named("emailService") examples.advanced.service.NotificationService emailService\n    ) {\n        this.notificationManager = notificationManager;\n        this.processor1 = processor1;\n        this.processor2 = processor2;\n        \n        System.out.println("AdvancedController created:");\n        System.out.println("  Processor 1 ID: " + processor1.getInstanceId());\n        System.out.println("  Processor 2 ID: " + processor2.getInstanceId());\n        System.out.println("  Same instances? " + (processor1 == processor2)); // Should be false\n        \n        // Test the email service directly\n        emailService.send("test@example.com", "Direct injection test");\n    }\n\n    public Response sendNotification(Request request) {\n        String recipient = request.getQueryParam("recipient");\n        String message = request.getQueryParam("message");\n        String type = request.getQueryParam("type");\n\n        if (recipient == null || message == null) {\n            return Response.badRequest().json("{\\"error\\": \\"recipient and message are required\\"}");\n        }\n\n        // Send via specific services\n        switch (type != null ? type : "default") {\n            case "email":\n                notificationManager.sendViaEmail(recipient, message);\n                break;\n            case "sms":\n                notificationManager.sendViaSms(recipient, message);\n                break;\n            case "all":\n                notificationManager.sendViaAll(recipient, message);\n                break;\n            default:\n                notificationManager.sendViaDefault(recipient, message);\n                break;\n        }\n\n        return Response.json(Map.of("status", "sent", "type", type != null ? type : "default"));\n    }\n\n    public Response processRequests(Request request) {\n        String data = request.getQueryParam("data");\n        if (data == null) data = "sample data";\n\n        // Use both processor instances\n        processor1.processRequest(data + " (processor1)");\n        processor2.processRequest(data + " (processor2)");\n\n        Map<String, Object> result = new HashMap<>();\n        result.put("processor1", Map.of(\n            "id", processor1.getInstanceId(),\n            "requestCount", processor1.getRequestCount()\n        ));\n        result.put("processor2", Map.of(\n            "id", processor2.getInstanceId(),\n            "requestCount", processor2.getRequestCount()\n        ));\n\n        return Response.json(result);\n    }\n\n    public Response getInfo(Request request) {\n        Map<String, Object> info = new HashMap<>();\n        info.put("controller", "AdvancedController");\n        info.put("features", new String[]{\n            "Multiple interface implementations",\n            "Named injection",\n            "Primary bean selection",\n            "Prototype scope",\n            "Constructor injection"\n        });\n        \n        // This endpoint demonstrates what happens without @Named or @Primary\n        // In our case, we use @Named injection so no conflict occurs\n        \n        return Response.json(info);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"advanced-application",children:"Advanced Application"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package examples.advanced;\n\nimport examples.advanced.controller.AdvancedController;\nimport jazzyframework.core.Config;\nimport jazzyframework.core.Server;\nimport jazzyframework.routing.Router;\n\npublic class AdvancedDIApp {\n    public static void main(String[] args) {\n        // Create configuration\n        Config config = new Config();\n        config.setEnableMetrics(true);\n\n        // Create router and define routes\n        Router router = new Router();\n\n        // Advanced DI demonstration routes\n        router.GET("/advanced/notification", "sendNotification", AdvancedController.class);\n        router.GET("/advanced/process", "processRequests", AdvancedController.class);\n        router.GET("/advanced/info", "getInfo", AdvancedController.class);\n\n        // Create and start server\n        Server server = new Server(router, config);\n\n        System.out.println("\ud83d\ude80 Advanced Jazzy Framework DI Example starting...");\n        System.out.println("\ud83d\udcca Metrics: http://localhost:8090/metrics");\n        System.out.println("\ud83d\udd27 Advanced DI Demo: http://localhost:8090/advanced/info");\n        System.out.println();\n        System.out.println("Example API calls:");\n        System.out.println("  curl http://localhost:8090/advanced/info");\n        System.out.println("  curl \\"http://localhost:8090/advanced/notification?recipient=test@example.com&message=Hello&type=email\\"");\n        System.out.println("  curl \\"http://localhost:8090/advanced/notification?recipient=test@example.com&message=Hello&type=all\\"");\n        System.out.println("  curl \\"http://localhost:8090/advanced/process?data=TestData\\"");\n\n        // Add shutdown hook to demonstrate @PreDestroy\n        Runtime.getRuntime().addShutdownHook(new Thread(() -> {\n            System.out.println("\\n\ud83d\uded1 Shutting down server...");\n            server.getDIContainer().dispose(); // This will call @PreDestroy methods\n        }));\n\n        server.start(8090);\n    }\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"running-the-examples",children:"Running the Examples"}),"\n",(0,r.jsx)(n.h3,{id:"basic-example",children:"Basic Example"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Compile: ",(0,r.jsx)(n.code,{children:'javac -cp "lib/*" src/main/java/examples/di/*.java src/main/java/examples/di/**/*.java'})]}),"\n",(0,r.jsxs)(n.li,{children:["Run: ",(0,r.jsx)(n.code,{children:'java -cp "lib/*:src/main/java" examples.di.App'})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Output will show DI initialization:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"UserRepository initialized with 2 users\nUserService created with injected UserRepository  \nUserController created with injected UserService\n\ud83d\ude80 Jazzy Framework DI Example Server starting...\n"})}),"\n",(0,r.jsx)(n.h3,{id:"advanced-example",children:"Advanced Example"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Compile: ",(0,r.jsx)(n.code,{children:'javac -cp "lib/*" src/main/java/examples/advanced/*.java src/main/java/examples/advanced/**/*.java'})]}),"\n",(0,r.jsxs)(n.li,{children:["Run: ",(0,r.jsx)(n.code,{children:'java -cp "lib/*:src/main/java" examples.advanced.AdvancedDIApp'})]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Output will show advanced DI features:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"EmailNotificationService initialized\nSmsNotificationService initialized  \nPushNotificationService initialized (PRIMARY)\nCreated RequestProcessor: abc12345\nInitializing RequestProcessor: abc12345\nCreated RequestProcessor: def67890\nInitializing RequestProcessor: def67890\nNotificationManager created with all notification services\nAdvancedController created:\n  Processor 1 ID: abc12345\n  Processor 2 ID: def67890\n  Same instances? false\n\ud83d\udce7 Sending email to: test@example.com\n   Message: Direct injection test\n\ud83d\ude80 Advanced Jazzy Framework DI Example starting...\n"})}),"\n",(0,r.jsx)(n.h2,{id:"key-takeaways",children:"Key Takeaways"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Zero Configuration"}),": No XML or manual setup required"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Constructor Injection"}),": Clean, testable dependency injection"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Multiple Implementations"}),": Use ",(0,r.jsx)(n.code,{children:"@Named"})," and ",(0,r.jsx)(n.code,{children:"@Primary"})," for flexibility"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Lifecycle Management"}),": ",(0,r.jsx)(n.code,{children:"@PostConstruct"})," and ",(0,r.jsx)(n.code,{children:"@PreDestroy"})," for proper initialization/cleanup"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Scope Management"}),": ",(0,r.jsx)(n.code,{children:"@Singleton"})," (default) vs ",(0,r.jsx)(n.code,{children:"@Prototype"})," for different use cases"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Framework Integration"}),": DI works seamlessly with routing and request handling"]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"The DI system makes Jazzy Framework enterprise-ready while maintaining its simplicity and ease of use."})]})}function p(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);