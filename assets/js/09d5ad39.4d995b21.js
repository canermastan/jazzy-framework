"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[864],{8453:(e,r,n)=>{n.d(r,{R:()=>i,x:()=>o});var s=n(6540);const t={},a=s.createContext(t);function i(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),s.createElement(a.Provider,{value:r},e.children)}},9365:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>s,toc:()=>u});const s=JSON.parse('{"id":"examples","title":"Examples","description":"This page provides comprehensive examples of using Jazzy Framework in different scenarios.","source":"@site/docs/examples.md","sourceDirName":".","slug":"/examples","permalink":"/docs/examples","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/examples.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","next":{"title":"Getting Started Guide","permalink":"/docs/getting-started"}}');var t=n(4848),a=n(8453);const i={},o="Examples",l={},u=[{value:"Basic REST API",id:"basic-rest-api",level:2},{value:"Data Validation Example",id:"data-validation-example",level:2},{value:"File Upload API",id:"file-upload-api",level:2},{value:"Authentication Middleware Example",id:"authentication-middleware-example",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"examples",children:"Examples"})}),"\n",(0,t.jsx)(r.p,{children:"This page provides comprehensive examples of using Jazzy Framework in different scenarios."}),"\n",(0,t.jsx)(r.h2,{id:"basic-rest-api",children:"Basic REST API"}),"\n",(0,t.jsx)(r.p,{children:"Here's a complete example of a basic REST API for a user management system:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'import static jazzyframework.http.ResponseFactory.response;\r\nimport jazzyframework.http.Request;\r\nimport jazzyframework.http.Response;\r\nimport jazzyframework.http.validation.ValidationResult;\r\nimport jazzyframework.routing.Router;\r\n\r\npublic class UserApi {\r\n\r\n    public static void main(String[] args) {\r\n        // Create a new router\r\n        Router router = new Router();\r\n        \r\n        // Define routes\r\n        router.get("/api/users", UserApi::getAllUsers);\r\n        router.get("/api/users/{id}", UserApi::getUserById);\r\n        router.post("/api/users", UserApi::createUser);\r\n        router.put("/api/users/{id}", UserApi::updateUser);\r\n        router.delete("/api/users/{id}", UserApi::deleteUser);\r\n        \r\n        // Start the server\r\n        router.startServer(8080);\r\n    }\r\n    \r\n    // Get all users\r\n    public static Response getAllUsers(Request request) {\r\n        // Get query parameters for pagination\r\n        int page = request.queryInt("page", 1);\r\n        int limit = request.queryInt("limit", 10);\r\n        \r\n        // Fetch users from database (example)\r\n        List<User> users = UserService.getUsers(page, limit);\r\n        int total = UserService.countUsers();\r\n        \r\n        return response().json(\r\n            "users", users,\r\n            "page", page,\r\n            "limit", limit,\r\n            "total", total\r\n        );\r\n    }\r\n    \r\n    // Get user by ID\r\n    public static Response getUserById(Request request) {\r\n        String id = request.path("id");\r\n        \r\n        // Find user\r\n        User user = UserService.findById(id);\r\n        \r\n        if (user == null) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "User not found"\r\n            ).status(404);\r\n        }\r\n        \r\n        return response().json(user);\r\n    }\r\n    \r\n    // Create new user\r\n    public static Response createUser(Request request) {\r\n        // Validate input\r\n        ValidationResult result = request.validator()\r\n            .field("name").required().minLength(3)\r\n            .field("email").required().email()\r\n            .field("password").required().minLength(8)\r\n            .validate();\r\n        \r\n        if (!result.isValid()) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "Validation failed",\r\n                "errors", result.getAllErrors()\r\n            ).status(400);\r\n        }\r\n        \r\n        // Parse JSON data\r\n        Map<String, Object> userData = request.parseJson();\r\n        \r\n        // Create user (example)\r\n        User newUser = UserService.createUser(\r\n            (String) userData.get("name"),\r\n            (String) userData.get("email"),\r\n            (String) userData.get("password")\r\n        );\r\n        \r\n        // Return response with created user\r\n        return response().json(\r\n            "status", "success",\r\n            "message", "User created successfully",\r\n            "user", newUser\r\n        ).status(201);\r\n    }\r\n    \r\n    // Update user\r\n    public static Response updateUser(Request request) {\r\n        String id = request.path("id");\r\n        \r\n        // Check if user exists\r\n        if (!UserService.exists(id)) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "User not found"\r\n            ).status(404);\r\n        }\r\n        \r\n        // Validate input\r\n        ValidationResult result = request.validator()\r\n            .field("name").optional().minLength(3)\r\n            .field("email").optional().email()\r\n            .validate();\r\n        \r\n        if (!result.isValid()) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "Validation failed",\r\n                "errors", result.getAllErrors()\r\n            ).status(400);\r\n        }\r\n        \r\n        // Parse JSON data\r\n        Map<String, Object> userData = request.parseJson();\r\n        \r\n        // Update user (example)\r\n        User updatedUser = UserService.updateUser(id, userData);\r\n        \r\n        return response().success("User updated successfully", updatedUser);\r\n    }\r\n    \r\n    // Delete user\r\n    public static Response deleteUser(Request request) {\r\n        String id = request.path("id");\r\n        \r\n        // Check if user exists\r\n        if (!UserService.exists(id)) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "User not found"\r\n            ).status(404);\r\n        }\r\n        \r\n        // Delete user\r\n        UserService.deleteUser(id);\r\n        \r\n        return response().success("User deleted successfully");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"data-validation-example",children:"Data Validation Example"}),"\n",(0,t.jsx)(r.p,{children:"Here's an example of using complex validation with custom validation rules:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'import jazzyframework.http.validation.ValidationRules;\r\n\r\n// Create a validation rules class\r\npublic class ProductCreateRules extends ValidationRules {\r\n    \r\n    public ProductCreateRules() {\r\n        field("name").required().minLength(3).maxLength(100);\r\n        field("price").required().min(0.01);\r\n        field("description").optional().maxLength(1000);\r\n        field("category").required().in("electronics", "clothing", "food", "books");\r\n        field("tags").optional();\r\n        field("stock").required().min(0);\r\n        field("sku").required().pattern("^[A-Z]{2}-\\\\d{4}-[A-Z]{2}$", \r\n            "SKU must be in format XX-0000-XX");\r\n    }\r\n}\r\n\r\n// Use in controller\r\npublic Response createProduct(Request request) {\r\n    ValidationResult result = request.validate(new ProductCreateRules());\r\n    \r\n    if (!result.isValid()) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Validation failed",\r\n            "errors", result.getAllErrors()\r\n        ).status(400);\r\n    }\r\n    \r\n    // Convert JSON data to Product object\r\n    Product product = request.toObject(Product.class);\r\n    \r\n    // Save product\r\n    productRepository.save(product);\r\n    \r\n    // Return success response\r\n    return response().success("Product created successfully", product)\r\n        .status(201);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"file-upload-api",children:"File Upload API"}),"\n",(0,t.jsx)(r.p,{children:"Here's how to handle file uploads in Jazzy:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response uploadImage(Request request) {\r\n    // Get file from request\r\n    UploadedFile file = request.file("image");\r\n    \r\n    if (file == null) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "No image file uploaded"\r\n        ).status(400);\r\n    }\r\n    \r\n    // Validate file type\r\n    if (!file.getContentType().startsWith("image/")) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Uploaded file is not an image"\r\n        ).status(400);\r\n    }\r\n    \r\n    // Save file to disk\r\n    String filename = System.currentTimeMillis() + "_" + file.getFilename();\r\n    String storagePath = "uploads/" + filename;\r\n    \r\n    try {\r\n        file.saveAs(storagePath);\r\n    } catch (IOException e) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Failed to save uploaded file"\r\n        ).status(500);\r\n    }\r\n    \r\n    // Return success response\r\n    return response().json(\r\n        "status", "success",\r\n        "message", "File uploaded successfully",\r\n        "filename", filename,\r\n        "path", storagePath,\r\n        "size", file.getSize(),\r\n        "contentType", file.getContentType()\r\n    );\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"authentication-middleware-example",children:"Authentication Middleware Example"}),"\n",(0,t.jsx)(r.p,{children:"Here's how to implement a simple authentication middleware:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'import jazzyframework.http.middleware.Middleware;\r\n\r\npublic class AuthMiddleware implements Middleware {\r\n    \r\n    @Override\r\n    public Response handle(Request request, MiddlewareChain chain) {\r\n        // Get authorization header\r\n        String token = request.header("Authorization");\r\n        \r\n        if (token == null || !token.startsWith("Bearer ")) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "Unauthorized"\r\n            ).status(401);\r\n        }\r\n        \r\n        // Extract token value\r\n        token = token.substring(7);\r\n        \r\n        try {\r\n            // Verify token and get user (example)\r\n            User user = TokenService.verifyToken(token);\r\n            \r\n            // Add user to request for later use in controllers\r\n            request.setAttribute("user", user);\r\n            \r\n            // Continue to next middleware or controller\r\n            return chain.next(request);\r\n            \r\n        } catch (Exception e) {\r\n            return response().json(\r\n                "status", "error",\r\n                "message", "Invalid or expired token"\r\n            ).status(401);\r\n        }\r\n    }\r\n}\r\n\r\n// Apply middleware to specific routes\r\nrouter.get("/api/profile", profileController::getProfile).with(new AuthMiddleware());\r\nrouter.group("/api/admin", adminRoutes -> {\r\n    adminRoutes.get("/users", adminController::getUsers);\r\n    adminRoutes.post("/settings", adminController::updateSettings);\r\n}).with(new AuthMiddleware());\n'})}),"\n",(0,t.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsx)(r.p,{children:"For more information on specific components:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/getting-started",children:"Getting Started"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/routing",children:"Routing"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/requests",children:"Requests"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/responses",children:"Responses"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/validation",children:"Validation"})}),"\n",(0,t.jsx)(r.li,{children:(0,t.jsx)(r.a,{href:"/docs/json",children:"JSON Operations"})}),"\n"]})]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}}}]);