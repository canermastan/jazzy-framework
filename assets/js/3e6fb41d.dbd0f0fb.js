"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[786],{4412:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>c,frontMatter:()=>i,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"requests","title":"HTTP Requests","description":"In Jazzy, HTTP requests are handled using the Request class. This class allows you to easily access request components such as URL parameters, query parameters, headers, and request body.","source":"@site/docs/requests.md","sourceDirName":".","slug":"/requests","permalink":"/docs/requests","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/requests.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"JSON Operations","permalink":"/docs/json"},"next":{"title":"ResponseFactory Class","permalink":"/docs/response_factory"}}');var t=s(4848),a=s(8453);const i={},o="HTTP Requests",l={},u=[{value:"Request Object",id:"request-object",level:2},{value:"URL Parameters (Path Parameters)",id:"url-parameters-path-parameters",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Headers",id:"headers",level:2},{value:"Request Body",id:"request-body",level:2},{value:"Processing JSON Body",id:"processing-json-body",level:3},{value:"Converting to Java Object",id:"converting-to-java-object",level:3},{value:"Data Validation",id:"data-validation",level:2},{value:"Request Information",id:"request-information",level:2},{value:"Example: Comprehensive Request Processing",id:"example-comprehensive-request-processing",level:2},{value:"Next Steps",id:"next-steps",level:2}];function d(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"http-requests",children:"HTTP Requests"})}),"\n",(0,t.jsxs)(r.p,{children:["In Jazzy, HTTP requests are handled using the ",(0,t.jsx)(r.code,{children:"Request"})," class. This class allows you to easily access request components such as URL parameters, query parameters, headers, and request body."]}),"\n",(0,t.jsx)(r.h2,{id:"request-object",children:"Request Object"}),"\n",(0,t.jsxs)(r.p,{children:["Each controller method receives a ",(0,t.jsx)(r.code,{children:"Request"})," object. This object contains all information about the incoming HTTP request."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public Response getUserById(Request request) {\r\n    // Use the Request object to process\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"url-parameters-path-parameters",children:"URL Parameters (Path Parameters)"}),"\n",(0,t.jsxs)(r.p,{children:["You can access URL parameters using the ",(0,t.jsx)(r.code,{children:"path()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response getUserById(Request request) {\r\n    String id = request.path("id");\r\n    \r\n    // Process using the id parameter\r\n    return response().json("id", id);\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["This retrieves the value of the ",(0,t.jsx)(r.code,{children:"{id}"})," parameter in a path pattern like ",(0,t.jsx)(r.code,{children:"/users/{id}"}),"."]}),"\n",(0,t.jsx)(r.h2,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsxs)(r.p,{children:["You can access query parameters using the ",(0,t.jsx)(r.code,{children:"query()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response searchUsers(Request request) {\r\n    String name = request.query("name");\r\n    String email = request.query("email");\r\n    \r\n    // Query parameters with default values\r\n    int page = request.queryInt("page", 1);\r\n    int limit = request.queryInt("limit", 10);\r\n    boolean active = request.queryBoolean("active", true);\r\n    \r\n    return response().json(\r\n        "name", name,\r\n        "email", email,\r\n        "page", page,\r\n        "limit", limit,\r\n        "active", active\r\n    );\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"headers",children:"Headers"}),"\n",(0,t.jsxs)(r.p,{children:["You can access headers using the ",(0,t.jsx)(r.code,{children:"header()"})," method:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response exampleWithHeaders(Request request) {\r\n    // Get headers\r\n    String contentType = request.header("Content-Type");\r\n    String authorization = request.header("Authorization");\r\n    \r\n    // Header with default value\r\n    String userAgent = request.header("User-Agent", "Unknown");\r\n    \r\n    return response().json(\r\n        "contentType", contentType,\r\n        "authorization", authorization,\r\n        "userAgent", userAgent\r\n    );\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"request-body",children:"Request Body"}),"\n",(0,t.jsx)(r.h3,{id:"processing-json-body",children:"Processing JSON Body"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"parseJson()"})," method is used to process the JSON request body:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response createUser(Request request) {\r\n    // Get JSON body as a Map\r\n    Map<String, Object> userData = request.parseJson();\r\n    \r\n    String name = (String) userData.get("name");\r\n    String email = (String) userData.get("email");\r\n    int age = ((Number) userData.get("age")).intValue();\r\n    \r\n    // Process using the data\r\n    return response().success("User created successfully");\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"converting-to-java-object",children:"Converting to Java Object"}),"\n",(0,t.jsxs)(r.p,{children:["The ",(0,t.jsx)(r.code,{children:"toObject()"})," method is used to directly convert the JSON request body to a Java object:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response createUser(Request request) {\r\n    // Convert JSON body to User object\r\n    User user = request.toObject(User.class);\r\n    \r\n    // Process using the User object\r\n    user.setId(generateId());\r\n    saveUser(user);\r\n    \r\n    return response().success("User created successfully", user);\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"For this conversion to work, your object must comply with Java bean standards (getter/setter methods or public fields)."}),"\n",(0,t.jsx)(r.h2,{id:"data-validation",children:"Data Validation"}),"\n",(0,t.jsxs)(r.p,{children:["You can use the ",(0,t.jsx)(r.code,{children:"validator()"})," method to validate request data:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response createUser(Request request) {\r\n    // Validation process\r\n    ValidationResult result = request.validator()\r\n        .field("name").required().minLength(3).maxLength(50)\r\n        .field("email").required().email()\r\n        .field("password").required().minLength(8)\r\n            .pattern("^(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\d).*$", \r\n                "Password must contain at least one uppercase letter, one lowercase letter, and one number")\r\n        .field("role").in("admin", "user", "editor")\r\n        .validate();\r\n    \r\n    if (!result.isValid()) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Validation failed",\r\n            "errors", result.getAllErrors()\r\n        ).status(400);\r\n    }\r\n    \r\n    // Validation successful, continue processing\r\n    Map<String, Object> userData = request.parseJson();\r\n    \r\n    // Perform operations\r\n    String newId = "user-" + System.currentTimeMillis();\r\n    userData.put("id", newId);\r\n    \r\n    return response().success("User created successfully", userData).status(201);\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["You can use ",(0,t.jsx)(r.code,{children:"ValidationRules"})," classes for more comprehensive validation:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response createUserWithRules(Request request) {\r\n    // Validation using UserCreateRules class\r\n    ValidationResult result = request.validate(new UserCreateRules());\r\n    \r\n    if (!result.isValid()) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Validation failed",\r\n            "errors", result.getAllErrors()\r\n        ).status(400);\r\n    }\r\n    \r\n    // Validation successful, continue processing\r\n    Map<String, Object> userData = request.parseJson();\r\n    userData.remove("password");\r\n    String newId = "user-" + System.currentTimeMillis();\r\n    userData.put("id", newId);\r\n    \r\n    return response().success("User created successfully", userData).status(201);\r\n}\n'})}),"\n",(0,t.jsx)(r.p,{children:"You can define the ValidationRules class as follows:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public class UserCreateRules extends ValidationRules {\r\n    \r\n    public UserCreateRules() {\r\n        field("name").required().minLength(3).maxLength(50);\r\n        field("email").required().email();\r\n        field("password").required().minLength(8)\r\n            .pattern("^(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\d).*$", \r\n                "Password must contain at least one uppercase letter, one lowercase letter, and one number");\r\n        field("role").in("admin", "user", "editor");\r\n    }\r\n}\n'})}),"\n",(0,t.jsxs)(r.p,{children:["See the ",(0,t.jsx)(r.a,{href:"/docs/validation",children:"Validation"})," document for detailed validation."]}),"\n",(0,t.jsx)(r.h2,{id:"request-information",children:"Request Information"}),"\n",(0,t.jsx)(r.p,{children:"You can also get other information from the Request object:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response requestInfo(Request request) {\r\n    String method = request.getMethod();  // HTTP method (GET, POST, etc.)\r\n    String path = request.getPath();      // Request path\r\n    String body = request.getBody();      // Raw request body\r\n    \r\n    Map<String, String> headers = request.getHeaders();        // All headers\r\n    Map<String, String> pathParams = request.getPathParams();  // All path parameters\r\n    Map<String, String> queryParams = request.getQueryParams(); // All query parameters\r\n    \r\n    return response().json(\r\n        "method", method,\r\n        "path", path,\r\n        "bodyLength", body.length(),\r\n        "headerCount", headers.size(),\r\n        "pathParamCount", pathParams.size(),\r\n        "queryParamCount", queryParams.size()\r\n    );\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"example-comprehensive-request-processing",children:"Example: Comprehensive Request Processing"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response processOrder(Request request) {\r\n    // Get path parameter\r\n    String orderId = request.path("id");\r\n    \r\n    // Get query parameters\r\n    boolean includeDetails = request.queryBoolean("details", false);\r\n    \r\n    // Check header\r\n    String authorization = request.header("Authorization");\r\n    if (authorization == null || !isValidToken(authorization)) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Unauthorized"\r\n        ).status(401);\r\n    }\r\n    \r\n    // Validate body\r\n    ValidationResult result = request.validator()\r\n        .field("items").required()\r\n        .field("customer").required()\r\n        .validate();\r\n    \r\n    if (!result.isValid()) {\r\n        return response().json(\r\n            "status", "error",\r\n            "message", "Validation failed",\r\n            "errors", result.getAllErrors()\r\n        ).status(400);\r\n    }\r\n    \r\n    // Validation successful, convert to object\r\n    Map<String, Object> orderData = request.parseJson();\r\n    orderData.put("id", orderId);\r\n    \r\n    // Process\r\n    // ...\r\n    \r\n    // Return response\r\n    return response().success("Order processed successfully", orderData);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Learn how to create ",(0,t.jsx)(r.a,{href:"/docs/responses",children:"HTTP Responses"})]}),"\n",(0,t.jsxs)(r.li,{children:["Explore ",(0,t.jsx)(r.a,{href:"/docs/validation",children:"Validation"})," mechanisms in more detail"]}),"\n",(0,t.jsxs)(r.li,{children:["Learn about ",(0,t.jsx)(r.a,{href:"/docs/json",children:"JSON Operations"})]}),"\n"]})]})}function c(e={}){const{wrapper:r}={...(0,a.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>i,x:()=>o});var n=s(6540);const t={},a=n.createContext(t);function i(e){const r=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:i(e.components),n.createElement(a.Provider,{value:r},e.children)}}}]);