"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[528],{6530:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>i,toc:()=>l});const i=JSON.parse('{"id":"repositories","title":"Repository Pattern","description":"The Repository Pattern in Jazzy Framework provides a Spring Data JPA-like abstraction for data access. It automatically generates implementations for repository interfaces, eliminating the need for boilerplate code while providing powerful query capabilities.","source":"@site/docs/repositories.md","sourceDirName":".","slug":"/repositories","permalink":"/jazzy-framework/docs/repositories","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/repositories.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Database Integration","permalink":"/jazzy-framework/docs/database-integration"},"next":{"title":"Query Methods","permalink":"/jazzy-framework/docs/query-methods"}}');var t=n(4848),s=n(8453);const a={},o="Repository Pattern",d={},l=[{value:"Overview",id:"overview",level:2},{value:"BaseRepository Interface",id:"baserepository-interface",level:2},{value:"Creating Repository Interfaces",id:"creating-repository-interfaces",level:2},{value:"Basic Repository",id:"basic-repository",level:3},{value:"Repository with Custom Methods",id:"repository-with-custom-methods",level:3},{value:"Method Name Query Generation",id:"method-name-query-generation",level:2},{value:"Supported Keywords",id:"supported-keywords",level:3},{value:"Query Method Examples",id:"query-method-examples",level:3},{value:"Custom Queries with @Query",id:"custom-queries-with-query",level:2},{value:"HQL/JPQL Queries",id:"hqljpql-queries",level:3},{value:"Native SQL Queries",id:"native-sql-queries",level:3},{value:"Modifying Queries",id:"modifying-queries",level:2},{value:"Repository Implementation Details",id:"repository-implementation-details",level:2},{value:"Automatic Proxy Creation",id:"automatic-proxy-creation",level:3},{value:"Transaction Management",id:"transaction-management",level:3},{value:"Error Handling",id:"error-handling",level:3},{value:"Advanced Repository Patterns",id:"advanced-repository-patterns",level:2},{value:"Repository with Custom Base",id:"repository-with-custom-base",level:3},{value:"Repository Composition",id:"repository-composition",level:3},{value:"Best Practices",id:"best-practices",level:2},{value:"1. Repository Naming",id:"1-repository-naming",level:3},{value:"2. Method Naming",id:"2-method-naming",level:3},{value:"3. Query Complexity",id:"3-query-complexity",level:3},{value:"4. Return Types",id:"4-return-types",level:3},{value:"Testing Repositories",id:"testing-repositories",level:2},{value:"Unit Testing",id:"unit-testing",level:3},{value:"Integration Testing",id:"integration-testing",level:3},{value:"Next Steps",id:"next-steps",level:2}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"repository-pattern",children:"Repository Pattern"})}),"\n",(0,t.jsx)(r.p,{children:"The Repository Pattern in Jazzy Framework provides a Spring Data JPA-like abstraction for data access. It automatically generates implementations for repository interfaces, eliminating the need for boilerplate code while providing powerful query capabilities."}),"\n",(0,t.jsx)(r.h2,{id:"overview",children:"Overview"}),"\n",(0,t.jsx)(r.p,{children:"Jazzy's repository system provides:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Automatic Implementation"}),": No need to write repository implementations"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Type Safety"}),": Generic type parameters ensure compile-time safety"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Method Name Parsing"}),": Automatic query generation from method names"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Custom Queries"}),": Support for HQL/JPQL and native SQL"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Transaction Management"}),": Automatic transaction handling"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"Caching"}),": Built-in repository instance caching"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"baserepository-interface",children:"BaseRepository Interface"}),"\n",(0,t.jsxs)(r.p,{children:["All repository interfaces must extend ",(0,t.jsx)(r.code,{children:"BaseRepository<T, ID>"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public interface BaseRepository<T, ID> {\r\n    // Save operations\r\n    T save(T entity);\r\n    List<T> saveAll(Iterable<T> entities);\r\n    T saveAndFlush(T entity);\r\n    \r\n    // Find operations\r\n    Optional<T> findById(ID id);\r\n    List<T> findAll();\r\n    List<T> findAllById(Iterable<ID> ids);\r\n    \r\n    // Existence checks\r\n    boolean existsById(ID id);\r\n    long count();\r\n    \r\n    // Delete operations\r\n    void deleteById(ID id);\r\n    void delete(T entity);\r\n    void deleteAllById(Iterable<ID> ids);\r\n    void deleteAll(Iterable<T> entities);\r\n    void deleteAll();\r\n    void deleteInBatch(Iterable<T> entities);\r\n    void deleteAllInBatch();\r\n    \r\n    // Utility operations\r\n    void flush();\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"creating-repository-interfaces",children:"Creating Repository Interfaces"}),"\n",(0,t.jsx)(r.h3,{id:"basic-repository",children:"Basic Repository"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"package com.example.repository;\r\n\r\nimport com.example.entity.User;\r\nimport jazzyframework.data.BaseRepository;\r\n\r\npublic interface UserRepository extends BaseRepository<User, Long> {\r\n    // Inherits all basic CRUD operations\r\n    // Additional methods can be added here\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"repository-with-custom-methods",children:"Repository with Custom Methods"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'package com.example.repository;\r\n\r\nimport com.example.entity.User;\r\nimport jazzyframework.data.BaseRepository;\r\nimport jazzyframework.data.annotations.Query;\r\nimport jazzyframework.data.annotations.Modifying;\r\n\r\nimport java.util.List;\r\nimport java.util.Optional;\r\n\r\npublic interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Method name parsing - automatically generates queries\r\n    Optional<User> findByEmail(String email);\r\n    List<User> findByActive(boolean active);\r\n    List<User> findByNameContaining(String name);\r\n    List<User> findByAgeGreaterThan(int age);\r\n    List<User> findByEmailAndActive(String email, boolean active);\r\n    \r\n    // Count operations\r\n    long countByActive(boolean active);\r\n    long countByAgeGreaterThan(int age);\r\n    \r\n    // Existence checks\r\n    boolean existsByEmail(String email);\r\n    boolean existsByEmailAndActive(String email, boolean active);\r\n    \r\n    // Custom HQL/JPQL queries\r\n    @Query("SELECT u FROM User u WHERE u.email = :email AND u.active = true")\r\n    Optional<User> findActiveUserByEmail(String email);\r\n    \r\n    @Query("SELECT u FROM User u WHERE u.name LIKE %:name% ORDER BY u.name")\r\n    List<User> searchByNameSorted(String name);\r\n    \r\n    // Native SQL queries\r\n    @Query(value = "SELECT * FROM users WHERE email = ?1", nativeQuery = true)\r\n    Optional<User> findByEmailNative(String email);\r\n    \r\n    // Update operations\r\n    @Query("UPDATE User u SET u.active = :active WHERE u.email = :email")\r\n    @Modifying\r\n    int updateUserActiveStatus(String email, boolean active);\r\n    \r\n    @Query("DELETE FROM User u WHERE u.active = false")\r\n    @Modifying\r\n    int deleteInactiveUsers();\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"method-name-query-generation",children:"Method Name Query Generation"}),"\n",(0,t.jsx)(r.p,{children:"Jazzy automatically generates queries based on method names following Spring Data JPA conventions:"}),"\n",(0,t.jsx)(r.h3,{id:"supported-keywords",children:"Supported Keywords"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Keyword"}),(0,t.jsx)(r.th,{children:"Sample"}),(0,t.jsx)(r.th,{children:"JPQL snippet"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"And"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByLastnameAndFirstname"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.lastname = ?1 and x.firstname = ?2"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Or"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByLastnameOrFirstname"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.lastname = ?1 or x.firstname = ?2"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"Is"}),", ",(0,t.jsx)(r.code,{children:"Equals"})]}),(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"findByFirstname"}),", ",(0,t.jsx)(r.code,{children:"findByFirstnameIs"})]}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.firstname = ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Between"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByStartDateBetween"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.startDate between ?1 and ?2"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"LessThan"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeLessThan"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age < ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"LessThanEqual"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeLessThanEqual"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age <= ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"GreaterThan"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeGreaterThan"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age > ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"GreaterThanEqual"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeGreaterThanEqual"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age >= ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"After"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByStartDateAfter"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.startDate > ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Before"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByStartDateBefore"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.startDate < ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"IsNull"}),", ",(0,t.jsx)(r.code,{children:"Null"})]}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAge(Is)Null"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age is null"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsxs)(r.td,{children:[(0,t.jsx)(r.code,{children:"IsNotNull"}),", ",(0,t.jsx)(r.code,{children:"NotNull"})]}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAge(Is)NotNull"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age not null"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Like"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByFirstnameLike"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.firstname like ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"NotLike"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByFirstnameNotLike"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.firstname not like ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"StartingWith"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByFirstnameStartingWith"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.firstname like ?1%"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"EndingWith"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByFirstnameEndingWith"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.firstname like %?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Containing"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByFirstnameContaining"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.firstname like %?1%"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"OrderBy"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeOrderByLastnameDesc"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age = ?1 order by x.lastname desc"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"Not"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByLastnameNot"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.lastname <> ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"In"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeIn(Collection<Age> ages)"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age in ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"NotIn"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByAgeNotIn(Collection<Age> ages)"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.age not in ?1"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"True"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByActiveTrue()"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.active = true"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"False"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByActiveFalse()"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where x.active = false"})})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"IgnoreCase"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"findByFirstnameIgnoreCase"})}),(0,t.jsx)(r.td,{children:(0,t.jsx)(r.code,{children:"\u2026 where UPPER(x.firstname) = UPPER(?1)"})})]})]})]}),"\n",(0,t.jsx)(r.h3,{id:"query-method-examples",children:"Query Method Examples"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Simple property queries\r\n    Optional<User> findByEmail(String email);\r\n    List<User> findByActive(boolean active);\r\n    List<User> findByName(String name);\r\n    \r\n    // Comparison queries\r\n    List<User> findByAgeGreaterThan(int age);\r\n    List<User> findByAgeLessThanEqual(int age);\r\n    List<User> findByAgeBetween(int minAge, int maxAge);\r\n    \r\n    // String queries\r\n    List<User> findByNameContaining(String name);\r\n    List<User> findByNameStartingWith(String prefix);\r\n    List<User> findByNameEndingWith(String suffix);\r\n    List<User> findByNameLike(String pattern);\r\n    \r\n    // Boolean queries\r\n    List<User> findByActiveTrue();\r\n    List<User> findByActiveFalse();\r\n    \r\n    // Null checks\r\n    List<User> findByLastLoginIsNull();\r\n    List<User> findByLastLoginIsNotNull();\r\n    \r\n    // Collection queries\r\n    List<User> findByAgeIn(Collection<Integer> ages);\r\n    List<User> findByAgeNotIn(Collection<Integer> ages);\r\n    \r\n    // Combined conditions\r\n    List<User> findByEmailAndActive(String email, boolean active);\r\n    List<User> findByNameOrEmail(String name, String email);\r\n    List<User> findByActiveAndAgeGreaterThan(boolean active, int age);\r\n    \r\n    // Ordering\r\n    List<User> findByActiveOrderByNameAsc(boolean active);\r\n    List<User> findByActiveOrderByNameDesc(boolean active);\r\n    List<User> findByActiveOrderByNameAscAgeDesc(boolean active);\r\n    \r\n    // Count queries\r\n    long countByActive(boolean active);\r\n    long countByAgeGreaterThan(int age);\r\n    long countByEmailContaining(String emailPart);\r\n    \r\n    // Existence queries\r\n    boolean existsByEmail(String email);\r\n    boolean existsByEmailAndActive(String email, boolean active);\r\n    \r\n    // Delete queries\r\n    void deleteByActive(boolean active);\r\n    void deleteByAgeGreaterThan(int age);\r\n    long deleteByEmailContaining(String emailPart);  // Returns count\r\n}\n"})}),"\n",(0,t.jsx)(r.h2,{id:"custom-queries-with-query",children:"Custom Queries with @Query"}),"\n",(0,t.jsxs)(r.p,{children:["For complex queries that can't be expressed through method names, use the ",(0,t.jsx)(r.code,{children:"@Query"})," annotation:"]}),"\n",(0,t.jsx)(r.h3,{id:"hqljpql-queries",children:"HQL/JPQL Queries"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Simple HQL query\r\n    @Query("SELECT u FROM User u WHERE u.email = :email")\r\n    Optional<User> findByEmailHql(String email);\r\n    \r\n    // Query with multiple parameters\r\n    @Query("SELECT u FROM User u WHERE u.name = :name AND u.age > :minAge")\r\n    List<User> findByNameAndMinAge(String name, int minAge);\r\n    \r\n    // Query with LIKE operator\r\n    @Query("SELECT u FROM User u WHERE u.name LIKE %:name% ORDER BY u.name")\r\n    List<User> searchByName(String name);\r\n    \r\n    // Aggregate queries\r\n    @Query("SELECT COUNT(u) FROM User u WHERE u.active = :active")\r\n    long countActiveUsers(boolean active);\r\n    \r\n    @Query("SELECT AVG(u.age) FROM User u WHERE u.active = true")\r\n    Double getAverageAgeOfActiveUsers();\r\n    \r\n    // Join queries\r\n    @Query("SELECT u FROM User u JOIN u.posts p WHERE p.title LIKE %:title%")\r\n    List<User> findUsersByPostTitle(String title);\r\n    \r\n    // Subqueries\r\n    @Query("SELECT u FROM User u WHERE u.id IN (SELECT p.user.id FROM Post p WHERE p.published = true)")\r\n    List<User> findUsersWithPublishedPosts();\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"native-sql-queries",children:"Native SQL Queries"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Simple native query\r\n    @Query(value = "SELECT * FROM users WHERE email = ?1", nativeQuery = true)\r\n    Optional<User> findByEmailNative(String email);\r\n    \r\n    // Native query with named parameters\r\n    @Query(value = "SELECT * FROM users WHERE name = :name AND active = :active", nativeQuery = true)\r\n    List<User> findByNameAndActiveNative(String name, boolean active);\r\n    \r\n    // Complex native query\r\n    @Query(value = """\r\n        SELECT u.* FROM users u \r\n        LEFT JOIN posts p ON u.id = p.user_id \r\n        WHERE u.active = true \r\n        GROUP BY u.id \r\n        HAVING COUNT(p.id) > :minPosts\r\n        ORDER BY COUNT(p.id) DESC\r\n        """, nativeQuery = true)\r\n    List<User> findActiveUsersWithMinimumPosts(int minPosts);\r\n    \r\n    // Native count query\r\n    @Query(value = "SELECT COUNT(*) FROM users WHERE active = ?1", nativeQuery = true)\r\n    long countByActiveNative(boolean active);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"modifying-queries",children:"Modifying Queries"}),"\n",(0,t.jsxs)(r.p,{children:["Use ",(0,t.jsx)(r.code,{children:"@Modifying"})," annotation for UPDATE, DELETE, or INSERT operations:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public interface UserRepository extends BaseRepository<User, Long> {\r\n    \r\n    // Update operations\r\n    @Query("UPDATE User u SET u.active = :active WHERE u.email = :email")\r\n    @Modifying\r\n    int updateUserActiveStatus(String email, boolean active);\r\n    \r\n    @Query("UPDATE User u SET u.lastLogin = CURRENT_TIMESTAMP WHERE u.id = :id")\r\n    @Modifying\r\n    int updateLastLogin(Long id);\r\n    \r\n    // Bulk update\r\n    @Query("UPDATE User u SET u.active = false WHERE u.lastLogin < :cutoffDate")\r\n    @Modifying\r\n    int deactivateInactiveUsers(Date cutoffDate);\r\n    \r\n    // Delete operations\r\n    @Query("DELETE FROM User u WHERE u.active = false")\r\n    @Modifying\r\n    int deleteInactiveUsers();\r\n    \r\n    @Query("DELETE FROM User u WHERE u.lastLogin < :cutoffDate")\r\n    @Modifying\r\n    int deleteOldUsers(Date cutoffDate);\r\n    \r\n    // Native modifying queries\r\n    @Query(value = "UPDATE users SET active = false WHERE last_login < ?1", nativeQuery = true)\r\n    @Modifying\r\n    int deactivateOldUsersNative(Date cutoffDate);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"repository-implementation-details",children:"Repository Implementation Details"}),"\n",(0,t.jsx)(r.h3,{id:"automatic-proxy-creation",children:"Automatic Proxy Creation"}),"\n",(0,t.jsx)(r.p,{children:"Jazzy automatically creates proxy implementations for repository interfaces:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Framework automatically creates this implementation\r\npublic class UserRepositoryImpl implements UserRepository {\r\n    private final SessionFactory sessionFactory;\r\n    private final BaseRepositoryImpl<User, Long> baseImpl;\r\n    \r\n    // All methods are automatically implemented\r\n    public Optional<User> findByEmail(String email) {\r\n        // Generated query: SELECT u FROM User u WHERE u.email = :email\r\n        // Automatic parameter binding and result mapping\r\n    }\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"transaction-management",children:"Transaction Management"}),"\n",(0,t.jsx)(r.p,{children:"Each repository method automatically runs in a transaction:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Each method call is wrapped in a transaction\r\nuserRepository.save(user);           // Transaction: BEGIN -> SAVE -> COMMIT\r\nuserRepository.findByEmail(email);   // Transaction: BEGIN -> SELECT -> COMMIT\r\nuserRepository.deleteById(id);       // Transaction: BEGIN -> DELETE -> COMMIT\n"})}),"\n",(0,t.jsx)(r.h3,{id:"error-handling",children:"Error Handling"}),"\n",(0,t.jsx)(r.p,{children:"Repository methods provide automatic error handling:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'try {\r\n    User user = userRepository.save(user);\r\n    return user;\r\n} catch (IllegalArgumentException e) {\r\n    // Validation errors (null parameters, etc.)\r\n    throw e;\r\n} catch (Exception e) {\r\n    // Database errors are wrapped in RuntimeException\r\n    throw new RuntimeException("Database operation failed", e);\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"advanced-repository-patterns",children:"Advanced Repository Patterns"}),"\n",(0,t.jsx)(r.h3,{id:"repository-with-custom-base",children:"Repository with Custom Base"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Custom base repository with additional methods\r\npublic interface CustomBaseRepository<T, ID> extends BaseRepository<T, ID> {\r\n    List<T> findAllActive();\r\n    void softDelete(ID id);\r\n    void restore(ID id);\r\n}\r\n\r\n// Implementation would be provided by extending BaseRepositoryImpl\r\npublic interface UserRepository extends CustomBaseRepository<User, Long> {\r\n    Optional<User> findByEmail(String email);\r\n}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"repository-composition",children:"Repository Composition"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'// Separate repositories for different concerns\r\npublic interface UserRepository extends BaseRepository<User, Long> {\r\n    Optional<User> findByEmail(String email);\r\n    List<User> findByActive(boolean active);\r\n}\r\n\r\npublic interface UserSecurityRepository extends BaseRepository<User, Long> {\r\n    @Query("UPDATE User u SET u.password = :password WHERE u.id = :id")\r\n    @Modifying\r\n    int updatePassword(Long id, String password);\r\n    \r\n    @Query("UPDATE User u SET u.failedLoginAttempts = :attempts WHERE u.id = :id")\r\n    @Modifying\r\n    int updateFailedLoginAttempts(Long id, int attempts);\r\n}\r\n\r\n// Service layer can inject both repositories\r\n@Component\r\npublic class UserService {\r\n    private final UserRepository userRepository;\r\n    private final UserSecurityRepository userSecurityRepository;\r\n    \r\n    public UserService(UserRepository userRepository, \r\n                      UserSecurityRepository userSecurityRepository) {\r\n        this.userRepository = userRepository;\r\n        this.userSecurityRepository = userSecurityRepository;\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,t.jsx)(r.h3,{id:"1-repository-naming",children:"1. Repository Naming"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Good: Clear, specific names\r\npublic interface UserRepository extends BaseRepository<User, Long> {}\r\npublic interface OrderRepository extends BaseRepository<Order, Long> {}\r\npublic interface ProductRepository extends BaseRepository<Product, Long> {}\r\n\r\n// Avoid: Generic or unclear names\r\npublic interface DataRepository extends BaseRepository<Object, Long> {}\r\npublic interface Repository extends BaseRepository<Entity, Long> {}\n"})}),"\n",(0,t.jsx)(r.h3,{id:"2-method-naming",children:"2. Method Naming"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Good: Descriptive method names\r\nOptional<User> findByEmail(String email);\r\nList<User> findActiveUsersByDepartment(String department);\r\nlong countUsersByRegistrationDateAfter(Date date);\r\n\r\n// Avoid: Unclear or overly complex names\r\nOptional<User> findByEmailAndActiveAndDepartmentAndRoleAndStatusAndCreatedDateAfter(...);\r\nList<User> getUserStuff(String thing);\n"})}),"\n",(0,t.jsx)(r.h3,{id:"3-query-complexity",children:"3. Query Complexity"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'// Good: Simple, focused queries\r\n@Query("SELECT u FROM User u WHERE u.email = :email AND u.active = true")\r\nOptional<User> findActiveUserByEmail(String email);\r\n\r\n// Consider breaking down complex queries\r\n@Query("SELECT u FROM User u WHERE u.department.name = :dept AND u.active = true")\r\nList<User> findActiveUsersByDepartment(String dept);\r\n\r\n// Avoid: Overly complex single queries\r\n@Query("""\r\n    SELECT u FROM User u \r\n    JOIN u.department d \r\n    JOIN u.roles r \r\n    JOIN u.permissions p \r\n    WHERE u.active = true \r\n    AND d.name = :dept \r\n    AND r.name IN :roles \r\n    AND p.name IN :permissions \r\n    AND u.createdDate > :date\r\n    AND u.lastLogin IS NOT NULL\r\n    """)\r\nList<User> findComplexUserCriteria(...);  // Too complex, break it down\n'})}),"\n",(0,t.jsx)(r.h3,{id:"4-return-types",children:"4. Return Types"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"// Good: Appropriate return types\r\nOptional<User> findByEmail(String email);        // Single result that might not exist\r\nList<User> findByActive(boolean active);         // Multiple results\r\nboolean existsByEmail(String email);             // Existence check\r\nlong countByActive(boolean active);              // Count operation\r\n\r\n// Avoid: Inappropriate return types\r\nUser findByEmail(String email);                  // Might return null\r\nOptional<List<User>> findByActive(boolean active); // Unnecessary Optional wrapping\n"})}),"\n",(0,t.jsx)(r.h2,{id:"testing-repositories",children:"Testing Repositories"}),"\n",(0,t.jsx)(r.h3,{id:"unit-testing",children:"Unit Testing"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@ExtendWith(MockitoExtension.class)\r\nclass UserServiceTest {\r\n    \r\n    @Mock\r\n    private UserRepository userRepository;\r\n    \r\n    @InjectMocks\r\n    private UserService userService;\r\n    \r\n    @Test\r\n    void shouldCreateUser() {\r\n        // Given\r\n        User user = new User("John", "john@example.com", "password");\r\n        when(userRepository.existsByEmail("john@example.com")).thenReturn(false);\r\n        when(userRepository.save(any(User.class))).thenReturn(user);\r\n        \r\n        // When\r\n        User result = userService.createUser("John", "john@example.com", "password");\r\n        \r\n        // Then\r\n        assertThat(result.getName()).isEqualTo("John");\r\n        verify(userRepository).existsByEmail("john@example.com");\r\n        verify(userRepository).save(any(User.class));\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h3,{id:"integration-testing",children:"Integration Testing"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'@Component\r\npublic class UserRepositoryTest {\r\n    private final UserRepository userRepository;\r\n    \r\n    public UserRepositoryTest(UserRepository userRepository) {\r\n        this.userRepository = userRepository;\r\n    }\r\n    \r\n    public void testRepositoryOperations() {\r\n        // Create test data\r\n        User user = new User("Test User", "test@example.com", "password");\r\n        User saved = userRepository.save(user);\r\n        \r\n        // Test find operations\r\n        Optional<User> found = userRepository.findByEmail("test@example.com");\r\n        assert found.isPresent();\r\n        assert found.get().getName().equals("Test User");\r\n        \r\n        // Test count operations\r\n        long count = userRepository.countByActive(true);\r\n        assert count > 0;\r\n        \r\n        // Test existence checks\r\n        boolean exists = userRepository.existsByEmail("test@example.com");\r\n        assert exists;\r\n        \r\n        // Cleanup\r\n        userRepository.delete(saved);\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/jazzy-framework/docs/query-methods",children:"Query Methods"})," - Detailed guide to method name parsing"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"database-examples.md",children:"Database Examples"})," - Complete working examples"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.a,{href:"/jazzy-framework/docs/database-integration",children:"Database Integration"})," - Overall database setup guide"]}),"\n"]})]})}function u(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var i=n(6540);const t={},s=i.createContext(t);function a(e){const r=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),i.createElement(s.Provider,{value:r},e.children)}}}]);