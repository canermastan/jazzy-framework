"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[700],{3900:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Jazzy Framework","href":"/jazzy-framework/docs/","docId":"index","unlisted":false},{"type":"link","label":"Getting Started Guide","href":"/jazzy-framework/docs/getting-started","docId":"getting-started","unlisted":false},{"type":"link","label":"\ud83d\ude80 CRUD Operations","href":"/jazzy-framework/docs/crud","docId":"crud","unlisted":false},{"type":"category","label":"\ud83c\udfd7\ufe0f Core Framework","items":[{"type":"link","label":"Routing","href":"/jazzy-framework/docs/routing","docId":"routing","unlisted":false},{"type":"link","label":"HTTP Requests","href":"/jazzy-framework/docs/requests","docId":"requests","unlisted":false},{"type":"link","label":"HTTP Responses","href":"/jazzy-framework/docs/responses","docId":"responses","unlisted":false},{"type":"link","label":"ResponseFactory Class","href":"/jazzy-framework/docs/response_factory","docId":"response_factory","unlisted":false},{"type":"link","label":"Validation","href":"/jazzy-framework/docs/validation","docId":"validation","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\ud83d\udd27 Dependency Injection","items":[{"type":"link","label":"Dependency Injection","href":"/jazzy-framework/docs/dependency-injection","docId":"dependency-injection","unlisted":false},{"type":"link","label":"Dependency Injection Examples","href":"/jazzy-framework/docs/di-examples","docId":"di-examples","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\ud83d\uddc4\ufe0f Database Integration","items":[{"type":"link","label":"Database Integration","href":"/jazzy-framework/docs/database-integration","docId":"database-integration","unlisted":false},{"type":"link","label":"Repository Pattern","href":"/jazzy-framework/docs/repositories","docId":"repositories","unlisted":false},{"type":"link","label":"Query Methods","href":"/jazzy-framework/docs/query-methods","docId":"query-methods","unlisted":false}],"collapsed":true,"collapsible":true},{"type":"category","label":"\ud83d\udee0\ufe0f Utilities & Advanced","items":[{"type":"link","label":"JSON Operations","href":"/jazzy-framework/docs/json","docId":"json","unlisted":false},{"type":"link","label":"Examples","href":"/jazzy-framework/docs/examples","docId":"examples","unlisted":false}],"collapsed":true,"collapsible":true}]},"docs":{"crud":{"id":"crud","title":"\ud83d\ude80 CRUD Operations","description":"Get full REST API with zero boilerplate code! The @Crud annotation automatically generates all standard CRUD endpoints for your entities.","sidebar":"tutorialSidebar"},"database-integration":{"id":"database-integration","title":"Database Integration","description":"Jazzy Framework 0.3 introduces comprehensive database integration with Spring Data JPA-like functionality. The framework provides automatic entity discovery, repository pattern implementation, and zero-configuration database setup.","sidebar":"tutorialSidebar"},"dependency-injection":{"id":"dependency-injection","title":"Dependency Injection","description":"Jazzy Framework 0.2 introduces a powerful Spring-like dependency injection (DI) system that automatically manages object creation, dependency resolution, and lifecycle management. The DI system provides zero-configuration automatic component discovery and enterprise-level features.","sidebar":"tutorialSidebar"},"di-examples":{"id":"di-examples","title":"Dependency Injection Examples","description":"This page provides complete, runnable examples demonstrating the Jazzy Framework 0.2 dependency injection system. Each example builds upon the previous ones, showing progressively more advanced features.","sidebar":"tutorialSidebar"},"examples":{"id":"examples","title":"Examples","description":"This page provides comprehensive examples of using Jazzy Framework in different scenarios.","sidebar":"tutorialSidebar"},"getting-started":{"id":"getting-started","title":"Getting Started Guide","description":"This guide explains the steps needed to start working with Jazzy Framework. It covers installing Jazzy, creating a basic application, and getting started with using it.","sidebar":"tutorialSidebar"},"index":{"id":"index","title":"Jazzy Framework","description":"Jazzy is a lightweight, fast, and easy-to-use web framework developed in Java. Inspired by Laravel\'s elegant syntax, Jazzy brings modern, fluent APIs to the Java world with enterprise-level dependency injection capabilities and comprehensive database integration.","sidebar":"tutorialSidebar"},"json":{"id":"json","title":"JSON Operations","description":"Jazzy provides easy creation and processing of JSON data format for modern web APIs. This document details the framework\'s JSON processing capabilities.","sidebar":"tutorialSidebar"},"query-methods":{"id":"query-methods","title":"Query Methods","description":"Jazzy Framework provides powerful query method capabilities that automatically generate database queries from method names, similar to Spring Data JPA. This feature eliminates the need to write SQL for common query patterns while maintaining type safety and readability.","sidebar":"tutorialSidebar"},"repositories":{"id":"repositories","title":"Repository Pattern","description":"The Repository Pattern in Jazzy Framework provides a Spring Data JPA-like abstraction for data access. It automatically generates implementations for repository interfaces, eliminating the need for boilerplate code while providing powerful query capabilities.","sidebar":"tutorialSidebar"},"requests":{"id":"requests","title":"HTTP Requests","description":"In Jazzy, HTTP requests are handled using the Request class. This class allows you to easily access request components such as URL parameters, query parameters, headers, and request body.","sidebar":"tutorialSidebar"},"response_factory":{"id":"response_factory","title":"ResponseFactory Class","description":"Jazzy Framework includes a ResponseFactory class inspired by Laravel. This class makes it easier to create JSON responses in a more fluent way. This approach is similar to Laravel\'s response()->json() helper function.","sidebar":"tutorialSidebar"},"responses":{"id":"responses","title":"HTTP Responses","description":"In Jazzy, HTTP responses are created using the Response class and ResponseFactory. Thanks to the fluent API inspired by Laravel, different response types can be easily created.","sidebar":"tutorialSidebar"},"routing":{"id":"routing","title":"Routing","description":"Jazzy\'s routing system provides an easy way to connect HTTP requests to appropriate controller methods. This document explains route definition, HTTP methods, and URL parameter usage.","sidebar":"tutorialSidebar"},"validation":{"id":"validation","title":"Validation","description":"Jazzy Framework provides a powerful and flexible validation system that allows you to validate request data easily.","sidebar":"tutorialSidebar"}}}}')}}]);