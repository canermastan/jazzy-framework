"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[268],{6277:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>a,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"routing","title":"Routing","description":"Jazzy\'s routing system provides an easy way to connect HTTP requests to appropriate controller methods. This document explains route definition, HTTP methods, and URL parameter usage.","source":"@site/docs/routing.md","sourceDirName":".","slug":"/routing","permalink":"/jazzy-framework/docs/routing","draft":false,"unlisted":false,"editUrl":"https://github.com/canermastan/jazzy-framework/tree/main/jazzy/docs/docs/routing.md","tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"HTTP Responses","permalink":"/jazzy-framework/docs/responses"},"next":{"title":"Validation","permalink":"/jazzy-framework/docs/validation"}}');var t=s(4848),o=s(8453);const a={},i="Routing",l={},d=[{value:"Basic Routing",id:"basic-routing",level:2},{value:"HTTP Method-Based Route Definition",id:"http-method-based-route-definition",level:3},{value:"HTTP Methods",id:"http-methods",level:2},{value:"URL Parameters",id:"url-parameters",level:2},{value:"Query Parameters",id:"query-parameters",level:2},{value:"Path Patterns",id:"path-patterns",level:2},{value:"Controller Methods",id:"controller-methods",level:2},{value:"Example: Comprehensive Routing",id:"example-comprehensive-routing",level:2},{value:"Next Steps",id:"next-steps",level:2}];function u(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"routing",children:"Routing"})}),"\n",(0,t.jsx)(r.p,{children:"Jazzy's routing system provides an easy way to connect HTTP requests to appropriate controller methods. This document explains route definition, HTTP methods, and URL parameter usage."}),"\n",(0,t.jsx)(r.h2,{id:"basic-routing",children:"Basic Routing"}),"\n",(0,t.jsxs)(r.p,{children:["In Jazzy, routing is managed by the ",(0,t.jsx)(r.code,{children:"Router"})," class. Routes are created using HTTP method-specific definition methods."]}),"\n",(0,t.jsx)(r.h3,{id:"http-method-based-route-definition",children:"HTTP Method-Based Route Definition"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'Router router = new Router();\r\n\r\n// Define route for GET method\r\nrouter.GET("/users/{id}", "getUserById", UserController.class);\r\n\r\n// Define route for POST method\r\nrouter.POST("/users", "createUser", UserController.class);\r\n\r\n// Define route for PUT method\r\nrouter.PUT("/users/{id}", "updateUser", UserController.class);\r\n\r\n// Define route for DELETE method\r\nrouter.DELETE("/users/{id}", "deleteUser", UserController.class);\n'})}),"\n",(0,t.jsx)(r.h2,{id:"http-methods",children:"HTTP Methods"}),"\n",(0,t.jsx)(r.p,{children:"Jazzy supports the following HTTP methods:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"GET"}),": Retrieve a resource"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"POST"}),": Create a new resource"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"PUT"}),": Update an existing resource"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.strong,{children:"DELETE"}),": Delete a resource"]}),"\n"]}),"\n",(0,t.jsx)(r.h2,{id:"url-parameters",children:"URL Parameters"}),"\n",(0,t.jsxs)(r.p,{children:["In Jazzy, URL parameters are defined using the ",(0,t.jsx)(r.code,{children:"{parameter_name}"})," format:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'router.GET("/users/{id}", "getUserById", UserController.class);\n'})}),"\n",(0,t.jsx)(r.p,{children:"You can access these parameters from your controller method:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response getUserById(Request request) {\r\n    String id = request.path("id");\r\n    // Process using id\r\n    return response().json("id", id, "name", "John Doe");\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"query-parameters",children:"Query Parameters"}),"\n",(0,t.jsx)(r.p,{children:"Query parameters are taken directly from the URL and can be accessed from the Request object:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public Response getAllUsers(Request request) {\r\n    int page = request.queryInt("page", 1);  // Default value 1\r\n    int limit = request.queryInt("limit", 10);  // Default value 10\r\n    String sortBy = request.query("sort_by", "name");\r\n    String sortOrder = request.query("sort_order", "asc");\r\n    \r\n    // Filter data using page and limit\r\n    return response().json(\r\n        "page", page,\r\n        "limit", limit,\r\n        "sort", JSON.of(\r\n            "by", sortBy,\r\n            "order", sortOrder\r\n        ),\r\n        "users", getUserList(page, limit)\r\n    );\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"path-patterns",children:"Path Patterns"}),"\n",(0,t.jsx)(r.p,{children:"The Router considers path parameters when matching defined routes. For example:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"/users"})," \u2192 Exact match"]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"/users/{id}"})," \u2192 Parameterized match (e.g., ",(0,t.jsx)(r.code,{children:"/users/123"}),")"]}),"\n"]}),"\n",(0,t.jsx)(r.p,{children:"If you define multiple routes with the same type and path, the first defined route is used."}),"\n",(0,t.jsx)(r.h2,{id:"controller-methods",children:"Controller Methods"}),"\n",(0,t.jsx)(r.p,{children:"In Jazzy, controller methods must have the following signature:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:"public Response methodName(Request request) {\r\n    // Operations\r\n    return response;\r\n}\n"})}),"\n",(0,t.jsxs)(r.p,{children:["Each controller method takes a ",(0,t.jsx)(r.code,{children:"Request"})," object and returns a ",(0,t.jsx)(r.code,{children:"Response"})," object."]}),"\n",(0,t.jsx)(r.h2,{id:"example-comprehensive-routing",children:"Example: Comprehensive Routing"}),"\n",(0,t.jsx)(r.p,{children:"Below is a comprehensive example showing different routes:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'// Config and Router setup\r\nConfig config = new Config();\r\nconfig.setServerPort(8088);\r\nconfig.setEnableMetrics(true); // "/metrics" endpoint is automatically added\r\n\r\nRouter router = new Router();\r\n\r\n// User routes\r\nrouter.GET("/users/{id}", "getUserById", UserController.class);\r\nrouter.GET("/users", "getAllUsers", UserController.class);\r\nrouter.POST("/users", "createUser", UserController.class);\r\nrouter.PUT("/users/{id}", "updateUser", UserController.class);\r\nrouter.DELETE("/users/{id}", "deleteUser", UserController.class);\r\nrouter.POST("/users/with-rules", "createUserWithRules", UserController.class);\r\n\r\n// Product routes\r\nrouter.GET("/products/{id}", "getProduct", ProductController.class);\r\nrouter.GET("/products", "listProducts", ProductController.class);\r\nrouter.POST("/products", "createProduct", ProductController.class);\r\nrouter.PUT("/products/{id}", "updateProduct", ProductController.class);\r\nrouter.DELETE("/products/{id}", "deleteProduct", ProductController.class);\r\nrouter.POST("/products/with-rules", "createProductWithRules", ProductController.class);\r\n\r\n// Start the server\r\nServer server = new Server(router, config);\r\nserver.start(config.getServerPort());\n'})}),"\n",(0,t.jsx)(r.p,{children:"Controller examples:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-java",children:'public class UserController {\r\n    // Basic CRUD operations\r\n    public Response getUserById(Request request) { \r\n        String id = request.path("id");\r\n        return response().json("id", id, "name", "John Doe");\r\n    }\r\n    \r\n    public Response getAllUsers(Request request) { \r\n        int page = request.queryInt("page", 1);\r\n        return response().json("users", JSON.array(), "page", page);\r\n    }\r\n    \r\n    public Response createUser(Request request) { \r\n        // Validation and registration operations\r\n        return response().success("User created successfully");\r\n    }\r\n    \r\n    public Response updateUser(Request request) { \r\n        String id = request.path("id");\r\n        return response().success("User updated successfully");\r\n    }\r\n    \r\n    public Response deleteUser(Request request) { \r\n        String id = request.path("id");\r\n        return response().success("User deleted successfully");\r\n    }\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"next-steps",children:"Next Steps"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:["Read the request processing documentation to understand ",(0,t.jsx)(r.a,{href:"/jazzy-framework/docs/requests",children:"HTTP Requests"})]}),"\n",(0,t.jsxs)(r.li,{children:["Look at the response documentation to create ",(0,t.jsx)(r.a,{href:"/jazzy-framework/docs/responses",children:"HTTP Responses"})]}),"\n",(0,t.jsxs)(r.li,{children:["Check ",(0,t.jsx)(r.a,{href:"/jazzy-framework/docs/validation",children:"Validation"})," to validate request data"]}),"\n"]})]})}function c(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>a,x:()=>i});var n=s(6540);const t={},o=n.createContext(t);function a(e){const r=n.useContext(o);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),n.createElement(o.Provider,{value:r},e.children)}}}]);