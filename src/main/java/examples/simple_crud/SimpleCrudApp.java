package examples.simple_crud;

import examples.simple_crud.controller.ProductController;
import jazzyframework.core.Config;
import jazzyframework.core.Server;
import jazzyframework.routing.Router;

/**
 * Simple CRUD demonstration application.
 * 
 * This example shows how to use @Crud annotation with minimal setup:
 * - Product entity with basic fields
 * - ProductController with @Crud annotation 
 * - One overridden method (findAll) with custom logic
 * - All other CRUD operations auto-generated
 * 
 * Available endpoints:
 * - GET /api/products (custom - shows only in-stock products)
 * - GET /api/products/{id} (auto-generated)
 * - POST /api/products (auto-generated)
 * - PUT /api/products/{id} (auto-generated)
 * - DELETE /api/products/{id} (auto-generated)
 * - GET /api/products/search?name=laptop (auto-generated search)
 */
public class SimpleCrudApp {
    
    public static void main(String[] args) {
        Config config = new Config();
        config.setServerPort(8080);
        
        Router router = new Router();
        
        // Manual route registration for overridden method
        // This is IMPORTANT: When we override a CRUD method, we need to manually register its route
        router.GET("/api/products", "findAll", ProductController.class);
        
        Server server = new Server(router, config);
        
        printStartupInfo();
        
        server.start(config.getServerPort());
    }
    
    private static void printStartupInfo() {
        System.out.println("âœ¨ Simple CRUD Demo");
        System.out.println("ðŸŽ¯ Demonstrating basic @Crud annotation with method override");
        System.out.println();
        System.out.println("ðŸ“¡ Server starting on port 8080");
        System.out.println();
        System.out.println("ðŸ”„ Auto-generated CRUD endpoints (by @Crud annotation):");
        System.out.println("   GET    /api/products/{id}     - Find product by ID");
        System.out.println("   POST   /api/products          - Create new product");
        System.out.println("   PUT    /api/products/{id}     - Update product");
        System.out.println("   DELETE /api/products/{id}     - Delete product");
        System.out.println("   GET    /api/products/search   - Search products (?name=...)");
        System.out.println();
        System.out.println("ðŸŽ¨ Custom overridden endpoint:");
        System.out.println("   GET    /api/products          - Get in-stock products only (custom logic)");
        System.out.println();
        System.out.println("ðŸ§ª Example commands:");
        System.out.println("   curl \"http://localhost:8080/api/products\"");
        System.out.println("   curl -X POST -H \"Content-Type: application/json\" \\");
        System.out.println("        -d '{\"name\":\"Laptop\",\"description\":\"Gaming laptop\",\"price\":1299.99,\"stock\":5}' \\");
        System.out.println("        \"http://localhost:8080/api/products\"");
        System.out.println("   curl \"http://localhost:8080/api/products/1\"");
        System.out.println("   curl \"http://localhost:8080/api/products/search?name=laptop\"");
        System.out.println();
        System.out.println("ðŸ’¡ Key Feature: Only the overridden findAll method needed manual registration!");
        System.out.println("ðŸ’¡ All other CRUD methods are automatically generated by @Crud annotation!");
        System.out.println();
    }
} 